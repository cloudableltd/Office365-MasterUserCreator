<File version="3.1">
  <FileID>c95ae3e0-a538-420a-aeb6-92411ccf751a</FileID>
  <Preview>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
QmCC</Preview>
  <Form>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
m6Ltf7qf/h9NPMUNRKQDAA==</Form>
  <Code><![CDATA[#region Control Helper Functions
function Toogle-LicenseStatus
{
	If ($null -eq $Licenses2Add)
	{
		$checkedlistboxDISTROo365groups.Enabled = $false
		$comboboxsharedmaiboxpermission.Enabled = $false
		$comboboxsharedmailboxautomap.Enabled = $false
		$labelSecurityGroups.Text = "Please connect to Office 365 in the General tab to add your user to Groups.
#If no license is selected for your user, this will remain disabled"
		$checkedlistboxsharedmailboxes.Enabled = $false
		$labelsharedmailboxes.Text = "Please connect to Office 365 in the General tab to add your user to Shared Mailboxes.
#If no license is selected for your user, this will remain disabled"
		If (($comboboxO365countrycode.SelectedItem -eq $Null) -and ($Licenses2Add.Count -ge 1))
		{
			If ($DarkMode -eq 1)
			{
				$labelCountryCode.Text = "*Country Code"
				$labelCountryCode.ForeColor = 'LightCoral'
				
			}
			Else
			{
				$labelCountryCode.Text = "*Country Code"
				$labelCountryCode.ForeColor = 'Firebrick'
				
			}
			$CountryCode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CountryCode -ErrorAction SilentlyContinue).CountryCode
			If ($null -eq $CountryCode)
			{
				$comboboxO365countrycode.SelectedItem = "US"
			}
			Else
			{
				$comboboxO365countrycode.SelectedItem = $CountryCode
			}
			
		}
		Else
		{
			If ($DarkMode -eq 1)
			{
				$labelCountryCode.Text = "Country Code"
				$labelCountryCode.ForeColor = 'White'
			}
			Else
			{
				$labelCountryCode.Text = "Country Code"
				$labelCountryCode.ForeColor = 'Black'
			}
		}
	}
	Else
	{
		$checkedlistboxDISTROo365groups.Enabled = $true
		$comboboxsharedmaiboxpermission.Enabled = $true
		$comboboxsharedmailboxautomap.Enabled = $true
		$labelO365Groups.Text = "Please select any Mail Enabled groups to add your user to"
		$checkedlistboxsharedmailboxes.Enabled = $true
		$labelsharedmailboxes.Text = "Please select any Shared Mailbox you want your user to have access to. The permission level and automapping you set will apply to all Shared Mailboxes you select"
		If (($comboboxO365countrycode.SelectedItem -eq $Null) -and ($Licenses2Add.Count -ge 1))
		{
			If ($DarkMode -eq 1)
			{
				$labelCountryCode.Text = "*Country Code"
				$labelCountryCode.ForeColor = 'LightCoral'
				
			}
			Else
			{
				$labelCountryCode.Text = "*Country Code"
				$labelCountryCode.ForeColor = 'Firebrick'
				
			}
			$CountryCode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CountryCode -ErrorAction SilentlyContinue).CountryCode
			If ($null -eq $CountryCode)
			{
				$comboboxO365countrycode.SelectedItem = "US"
			}
			Else
			{
				$comboboxO365countrycode.SelectedItem = $CountryCode
			}
		}
		Else
		{
			If ($DarkMode -eq 1)
			{
				$labelCountryCode.Text = "Country Code"
				$labelCountryCode.ForeColor = 'White'
			}
			Else
			{
				$labelCountryCode.Text = "Country Code"
				$labelCountryCode.ForeColor = 'Black'
			}
		}
	}
}

function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$listBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
	{
		$listBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$listBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$listBox.Items.Add($obj)
		}
		$listBox.EndUpdate()
	}
	else
	{
		$listBox.Items.Add($Items)
	}
	
	$listBox.DisplayMember = $DisplayMember
}

function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	$ComboBox.DisplayMember = $DisplayMember
}

function Get-DictionaryPassword
{
	param
	(
		
		[switch]$O365
	)
	$Dictionary = @(
		"Honda";
		"Staple";
		"Battery";
		"Civic";
		"Chicago";
		"Winter";
		"Cubs";
		"Bears";
		"Snow";
		"Train";
		"Shoes";
		"Blue";
		"Bike";
		"Ring";
		"Watch";
		"Computer";
		"Neck";
		"Laptop";
		"Monitor";
		"Toilet";
		"Baseball";
		"Football";
		"Soccer";
		"Phone";
		"Carbondale";
		"Saluki";
		"Swim";
		"Lake";
		"Puppy";
		"Watch";
		"Royals";
		"Basketball";
		"Letter";
		"Paper";
		"Sticker";
		"Kitten";
		"Marker";
		"Highway";
		"Wire";
		"Keyboard";
		"Frisbee";
		"Disc";
		"Hawk";
		"West";
		"North";
		"East";
		"South";
		"Water";
		"Ice";
		"Dirt";
		"Taco";
		"Mouse";
		"Deer";
		"Speaker";
		"Hand";
		"Green";
		"Purple";
		"Pink";
		"Boat";
		"Toilet";
		"Sting";
		"Fish";
		"Bee";
		"White";
		"Grey";
		"Shoes";
		"Carpet";
		"Bed";
		"Pillow";
		"Sears";
		"Mustard";
		"Relish";
		"Ketchup";
		"Milk";
		"Apple";
		"Orange";
		"Flower";
		"Lotion";
		"Plane";
		"Desert";
		"Sand";
		"Beach";
		"Clouds";
		"Wagon";
		"Hair";
		"Internet";
		"Track";
		"Golf";
		"Sledding";
		"Market";
		"Window";
		"Door";
		"Deck";
		"Cards";
		"Shelf";
		"Santa";
		"Tack";
		"Building";
		"Tennis";
		"Power";
		"Sox";
		"Wrigley";
		"Tea";
		"Juice";
		"Plant";
		"Geneva";
		"City";
		"Kansas";
		"Missouri";
		"Midwest";
		"Great";
		"Box";
		"Crane";
		"Michigan";
		"Illinois";
		"Garbage";
		"Cougars";
		"Route";
		"Bridge";
		"Mountain";
		"Message";
		"Fire";
		"Taxi";
		"Bus";
		"Color";
		"Sharpie";
		"Ball";
		"Square";
		"River";
		"Navy";
		"Pier";
		"Grant";
		"Park";
		"Lincoln";
		"President";
		"Wrigley";
		"Soldier";
		"Forest";
		"Bulldog";
		"Police";
		"Taco";
		"Deep";
		"Dish";
		"Pizza";
		"Fire";
		"Ice";
		"Lion";
		"World";
		"Shoe";
		"Ant";
		"Bug";
		"Hair";
		"Beard";
		"Light";
		"Wave";
		"Field";
		"Toll";
		"Tax";
		"Money";
		"Bill";
		"Pot";
		"Pan"
	)
	If ($O365 -eq $True)
	{
		$word1 = (Get-Random $Dictionary)
		$Num = Get-random -Maximum 99 -Minimum 0
		$WChar = @(
			"!"
			"@"
			"$"
			"%"
			"&"
			"?"
			"#"
		)
		$Wildchar = Get-random $WChar
		
		$Word1 + "-" + $Num + $WildChar
	}
	Else
	{
		$word1 = (Get-Random $Dictionary)
		
		$word2 = (Get-Random $Dictionary | Where-Object { $_ -ne $word1 })
		
		$Word3 = (Get-Random $Dictionary | Where-Object { ($_ -ne $word1) -and ($_ -ne $word2) })
		
		$Num = Get-random -Maximum 99 -Minimum 0
		
		$Word1 + "-" + $word2 + "-" + $word3 + $Num
	}
	
	
}

function Reset-Form
{
	###########################
	#                         #
	#  ACTIVE DIRECTORY USER  #
	#                         #
	###########################
	
	#General Page
	add-logs -text 'LOG: Resetting forms on General Page for Active Directory'
	$textboxFirstName.Text = ""
	$textboxInitials.Text = ""
	$textboxLastName.Text = ""
	$textboxDisplayName.Text = ""
	
	$ADDescriptionReset = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\Reset' | Get-ItemProperty -Name ADDescription -ErrorAction SilentlyContinue).ADDescription
	If ($ADDescriptionReset -ne 1)
	{
		$textboxDescription.Text = ""
	}
	
	$ADOfficeReset = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\Reset' | Get-ItemProperty -Name ADOffice -ErrorAction SilentlyContinue).ADOffice
	If ($ADOfficeReset -ne 1)
	{
		$textboxoffice.Text = ""
	}
	
	$textboxPasswordGen.Text = ""
	$maskedtextboxpassword.Text = ""
	$textboxConfirmPassword.Text = ""
	$textboxTelephone.Text = ""
	$textboxEmail.Text = ""
	$textboxWebPage.Text = ""
	add-logs -text 'LOG: Done'
	
	#Account Page
	add-logs -text 'LOG: Resetting forms on Account Page for Active Directory'
	$textboxUserLogonName.Text = ""
	$textboxSamAccount.Text = ""
	$checkboxAccountIsDisabled.CheckState = 'Unchecked'
	$checkboxUserMustChangePasswo.CheckState = 'Unchecked'
	$checkboxUserCannotChangePass.CheckState = 'Unchecked'
	$checkboxPasswordNeverExpires.CheckState = 'Unchecked'
	$comboboxOUTree.SelectedText = ""
	add-logs -text 'LOG: Done'
	
	#Address Page
	add-logs -text 'LOG: Resetting forms on Address Page for Active Directory'
	$textboxStreet.Text = ""
	$textboxPOBox.Text = ""
	
	$ADCityReset = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\Reset' | Get-ItemProperty -Name ADOffice -ErrorAction SilentlyContinue).ADOffice
	If ($ADCityReset -ne 1)
	{
		$textboxcity.Text = ""
	}
	$ADStateReset = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\Reset' | Get-ItemProperty -Name ADState -ErrorAction SilentlyContinue).ADState
	If ($ADStateReset -ne 1)
	{
		$textboxstate.Text = ""
	}
	
	$ADZipReset = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\Reset' | Get-ItemProperty -Name ADZip -ErrorAction SilentlyContinue).ADZip
	If ($ADZipReset -ne 1)
	{
		$textboxzipcode.Text = ""
	}
	
	
	add-logs -text 'LOG: Done'
	
	#Groups Page
	add-logs -text 'LOG: Resetting forms on Groups Page for Active Directory'
	for ($i = 0; $i -lt $checkedlistboxGroups.Items.Count; $i++)
	{
		
		$checkedlistboxGroups.SetItemCheckState($i, 'Unchecked')
		
	}
	add-logs -text 'LOG: Done'
	
	#Organization Page
	add-logs -text 'LOG: Resetting forms on Organization Page for Active Directory'
	$textboxjobtitle.Text = ""
	
	$ADDepartmentReset = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\Reset' | Get-ItemProperty -Name ADDepartment -ErrorAction SilentlyContinue).ADDepartment
	If ($ADDepartmentReset -ne 1)
	{
		$textboxDepartment.Text = ""
	}
	
	$ADCompanyReset = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\Reset' | Get-ItemProperty -Name ADCompany -ErrorAction SilentlyContinue).ADCompany
	If ($ADCompanyReset -ne 1)
	{
		$textboxCompany.Text = ""
	}
	add-logs -text 'LOG: Done'
	
	#Profile Page
	add-logs -text 'LOG: Resetting forms on Profile Page for Active Directory'
	$textboxprofilepath.Text = ""
	
	$ADLogonScriptReset = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\Reset' | Get-ItemProperty -Name ADLogonScript -ErrorAction SilentlyContinue).ADLogonScript
	If ($ADLogonScriptReset -ne 1)
	{
		$textboxlogonscript.Text = ""
	}
	

	
	$comboboxDriveLetter.SelectedIndex = 0
	$textboxhomedirectory.Text = ""
	add-logs -text 'LOG: Done'
	
	#Attributes Page
	add-logs -text 'LOG: Resetting forms on Attributes Page for Active Directory'
	$textboxproxyaddress.Text = ""
	$textboxEmployeeID.Text = ""
	$textboxemployeenumber.Text = ""
	$textboxemployeeType.Text = ""
	add-logs -text 'LOG: Done'
	
	
	###########################
	#                         #
	#     OFFICE 365 USER     #
	#                         #
	###########################
	
	#General Page
	add-logs -text 'LOG: Resetting forms on General Page for Office 365'
	$textboxO365FirstName.Text = ""
	$textboxO365LastName.Text = ""
	$textboxO365DisplayName.Text = ""
	$textboxo365passwordgen.Text = ""
	$maskedtextboxo365password.Text = ""
	$textboxo365confirmpassword.Text = ""
	add-logs -text 'LOG: Done'
	
	#Account Page
	add-logs -text 'LOG: Resetting forms on Account Page for Office 365'
	$checkboxRunADSync.Checked = $false
	$textboxO365UPN.Text = ""
	$textboxO365EmailAddress.Text = ""
	$textboxo365proxyaddresses.Text = ""
	$checkboxo365usermustchangepassword.Checked = $false
	$checkboxO365PasswordNeverExpires.Checked = $false
	$checkboxBlockCred.Checked = $false
	$comboboxMFA.SelectedItem = "False"
	$CountryCode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CountryCode -ErrorAction SilentlyContinue).CountryCode
	If ($null -eq $CountryCode)
	{
		$comboboxO365countrycode.SelectedItem = "US"
	}
	Else
	{
		$comboboxO365countrycode.SelectedItem = $CountryCode
	}
	add-logs -text 'LOG: Done'
	
	#Address Page
	add-logs -text 'LOG: Resetting forms on Address Page for Office 365'
	$textboxO365street.Text = ""

	$O365CityReset = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\Reset' | Get-ItemProperty -Name O365City -ErrorAction SilentlyContinue).O365City
	If ($O365CityReset -ne 1)
	{
		$textboxo365city.Text = ""
	}
	
	$O365StateReset = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\Reset' | Get-ItemProperty -Name O365State -ErrorAction SilentlyContinue).O365State
	If ($O365StateReset -ne 1)
	{
		$textboxo365state.Text = ""
	}
	
	$O365ZipReset = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\Reset' | Get-ItemProperty -Name O365Zip -ErrorAction SilentlyContinue).O365Zip
	If ($O365ZipReset -ne 1)
	{
		$textboxo365zip.Text = ""
	}
	
	
	add-logs -text 'LOG: Done'
	
	#Mail Groups Page
	add-logs -text 'LOG: Resetting forms on Mail Groups Page for Office 365'
	for ($i = 0; $i -lt $checkedlistboxDISTROo365groups.Items.Count; $i++)
	{
		
		$checkedlistboxDISTROo365groups.SetItemCheckState($i, 'Unchecked')
		
	}
	add-logs -text 'LOG: Done'
	
	#Security Groups Page
	add-logs -text 'LOG: Resetting forms on Security Groups Page for Office 365'
	for ($i = 0; $i -lt $checkedlistboxO365SecurityGroups.Items.Count; $i++)
	{
		
		$checkedlistboxO365SecurityGroups.SetItemCheckState($i, 'Unchecked')
		
	}
	add-logs -text 'LOG: Done'
	
	#Shared Mailboxes Page
	add-logs -text 'LOG: Resetting forms on Shared Mailboxes Page for Office 365'
	$comboboxsharedmaiboxpermission.SelectedIndex = 0
	$comboboxsharedmailboxautomap.SelectedIndex = 0
	for ($i = 0; $i -lt $checkedlistboxsharedmailboxes.Items.Count; $i++)
	{
		
		$checkedlistboxsharedmailboxes.SetItemCheckState($i, 'Unchecked')
		
	}
	add-logs -text 'LOG: Done'
}

function Update-DisplayNameTextbox
{
	$copyuser = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CopyUser -ErrorAction SilentlyContinue).CopyUser
	If ($copyuser -ne 1)
	{
		$config = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name UserFormatDisplayName -ErrorAction SilentlyContinue).UserFormatDisplayName
		#Create an array that we will use for formatting
		$DisplayNameFormatString = @()
		If (($null -eq $config) -or ($config -eq ""))
		{
			$config = "%Firstname% %LastName%"
			Get-Item 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' -Force | Set-ItemProperty -Name UserFormatDisplayName -Value "%FirstName% %LastName%" -Force | Out-Null
		}
		
		$config -split "%" | ForEach-Object {
			If ($_ -eq "FirstName")
			{
				$DisplayNameFormatString += $textboxFirstName.Text
			}
			ElseIf ($_ -eq "LastName")
			{
				$DisplayNameFormatString += $textboxLastName.Text
			}
			ElseIf (($_ -eq "Initial") -or ($_ -eq "Initials"))
			{
				$DisplayNameFormatString += $textboxInitials.Text
			}
			ElseIf ($_ -like " ")
			{
				$space = " "
				$DisplayNameFormatString += $space
			}
			ElseIf ($_ -eq "EmployeeID")
			{
				$DisplayNameFormatString += $textboxEmployeeID.text
			}
			ElseIf ($_ -eq "EmployeeNumber")
			{
				$DisplayNameFormatString += $textboxemployeenumber.text
			}
			ELseIf ($_ -eq "SamAccountName")
			{
				$DisplayNameFormatString += $textboxSamAccount.text
			}
			ElseIf (($_ -eq "UPN") -or ($_ -eq "UserPrincipalName"))
			{
				$DisplayNameFormatString += $textboxUserLogonName.text
			}
			ElseIf (($_ -eq "Email") -or ($_ -eq "E-Mail"))
			{
				$DisplayNameFormatString += $textboxEmail.text
			}
			ElseIf ($_ -eq "FirstLetterFirstName")
			{
				$DisplayNameFormatString += $textboxFirstName.Text.Substring(0, 1)
			}
			ElseIf ($_ -eq "FirstLetterLastName")
			{
				$DisplayNameFormatString += $textboxLastName.Text.Substring(0, 1)
			}
			ElseIf ($_ -eq "SamAccountName")
			{
				$DisplayNameFormatString += $textboxSamAccount.Text
			}
			ElseIf ($_ -eq "UserPrincipalNameDomain")
			{
				$EmailFormatString += $comboboxDomains.SelectedItem
			}
			ElseIf ($_ -eq "UPNDomain")
			{
				$EmailFormatString += $comboboxDomains.SelectedItem
			}
			Else
			{
				$DisplayNameFormatString += $_
			}
			
			$textboxDisplayName.Text = [String]::Join('', $DisplayNameFormatString)
			
		}
		
		
	}
}

function Update-EmailTextbox
{
	$copyuser = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CopyUser -ErrorAction SilentlyContinue).CopyUser
	If ($copyuser -ne 1)
	{
		$config = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name UserFormatEmail -ErrorAction SilentlyContinue).UserFormatEmail
		#Create an array that we will use for formatting
		$EmailFormatString = @()
		If (($null -ne $config) -and ($config -ne ""))
		{
			
			
			$config -split "%" | ForEach-Object {
				If ($_ -eq "FirstName")
				{
					$EmailFormatString += $textboxFirstName.Text
				}
				ElseIf ($_ -eq "LastName")
				{
					$EmailFormatString += $textboxLastName.Text
				}
				ElseIf (($_ -eq "Initial") -or ($_ -eq "Initials"))
				{
					$EmailFormatString += $textboxInitials.Text
				}
				ElseIf ($_ -like " ")
				{
					$space = " "
					$EmailFormatString += $space
				}
				ElseIf ($_ -eq "EmployeeID")
				{
					$EmailFormatString += $textboxEmployeeID.text
				}
				ElseIf ($_ -eq "EmployeeNumber")
				{
					$EmailFormatString += $textboxemployeenumber.text
				}
				ELseIf ($_ -eq "SamAccountName")
				{
					$EmailFormatString += $textboxSamAccount.text
				}
				ElseIf (($_ -eq "UPN") -or ($_ -eq "UserPrincipalName"))
				{
					$EmailFormatString += $textboxUserLogonName.text
				}
				ElseIf (($_ -eq "Email") -or ($_ -eq "E-Mail"))
				{
					$EmailFormatString += $textboxEmail.text
				}
				ElseIf ($_ -eq "FirstLetterFirstName")
				{
					$EmailFormatString += $textboxFirstName.Text.Substring(0, 1)
				}
				ElseIf ($_ -eq "FirstLetterLastName")
				{
					$EmailFormatString += $textboxLastName.Text.Substring(0, 1)
				}
				ElseIf ($_ -eq "SamAccountName")
				{
					$EmailFormatString += $textboxSamAccount.Text
				}
				ElseIf ($_ -eq "UserPrincipalNameDomain")
				{
					$EmailFormatString += $comboboxDomains.SelectedItem
				}
				ElseIf ($_ -eq "UPNDomain")
				{
					$EmailFormatString += $comboboxDomains.SelectedItem
				}
				Else
				{
					$EmailFormatString += $_
				}
				
			}
			$textboxEmail.Text = [String]::Join('', $EmailFormatString)
		}
	}
}

function Update-SamAccountNameTextbox
{
	$copyuser = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CopyUser -ErrorAction SilentlyContinue).CopyUser
	If ($copyuser -ne 1)
	{
		$config = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name UserFormatSamAccountName -ErrorAction SilentlyContinue).UserFormatSamAccountName
		#Create an array that we will use for formatting
		$SamAccountNameFormatString = @()
		If (($null -ne $config) -and ($config -ne ""))
		{
			
			
			$config -split "%" | ForEach-Object {
				If ($_ -eq "FirstName")
				{
					$SamAccountNameFormatString += $textboxFirstName.Text
				}
				ElseIf ($_ -eq "LastName")
				{
					$SamAccountNameFormatString += $textboxLastName.Text
				}
				ElseIf (($_ -eq "Initial") -or ($_ -eq "Initials"))
				{
					$SamAccountNameFormatString += $textboxInitials.Text
				}
				ElseIf ($_ -like " ")
				{
					$space = " "
					$SamAccountNameFormatString += $space
				}
				ElseIf ($_ -eq "EmployeeID")
				{
					$SamAccountNameFormatString += $textboxEmployeeID.text
				}
				ElseIf ($_ -eq "EmployeeNumber")
				{
					$SamAccountNameFormatString += $textboxemployeenumber.text
				}
				ELseIf ($_ -eq "SamAccountName")
				{
					$SamAccountNameFormatString += $textboxSamAccount.text
				}
				ElseIf (($_ -eq "UPN") -or ($_ -eq "UserPrincipalName"))
				{
					$SamAccountNameFormatString += $textboxUserLogonName.text
				}
				ElseIf (($_ -eq "Email") -or ($_ -eq "E-Mail"))
				{
					$SamAccountNameFormatString += $textboxEmail.text
				}
				ElseIf ($_ -eq "FirstLetterFirstName")
				{
					$SamAccountNameFormatString += $textboxFirstName.Text.Substring(0, 1)
				}
				ElseIf ($_ -eq "FirstLetterLastName")
				{
					$SamAccountNameFormatString += $textboxLastName.Text.Substring(0, 1)
				}
				ElseIf ($_ -eq "SamAccountName")
				{
					$SamAccountNameFormatString += $textboxSamAccount.Text
				}
				Else
				{
					$SamAccountNameFormatString += $_
				}
				
			}
			$textboxSamAccount.Text = [String]::Join('', $SamAccountNameFormatString)
		}
	}
}

function Update-UserPrincipalNameTextbox
{
	$copyuser = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CopyUser -ErrorAction SilentlyContinue).CopyUser
	If ($copyuser -ne 1)
	{
		$config = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name UserFormatUserPrincipalName -ErrorAction SilentlyContinue).UserFormatUserPrincipalName
		#Create an array that we will use for formatting
		$UserPrincipalNameFormatString = @()
		If (($null -ne $config) -and ($config -ne ""))
		{
			
			
			$config -split "%" | ForEach-Object {
				If ($_ -eq "FirstName")
				{
					$UserPrincipalNameFormatString += $textboxFirstName.Text
				}
				ElseIf ($_ -eq "LastName")
				{
					$UserPrincipalNameFormatString += $textboxLastName.Text
				}
				ElseIf (($_ -eq "Initial") -or ($_ -eq "Initials"))
				{
					$UserPrincipalNameFormatString += $textboxInitials.Text
				}
				ElseIf ($_ -like " ")
				{
					$space = " "
					$UserPrincipalNameFormatString += $space
				}
				ElseIf ($_ -eq "EmployeeID")
				{
					$UserPrincipalNameFormatString += $textboxEmployeeID.text
				}
				ElseIf ($_ -eq "EmployeeNumber")
				{
					$UserPrincipalNameFormatString += $textboxemployeenumber.text
				}
				ELseIf ($_ -eq "SamAccountName")
				{
					$UserPrincipalNameFormatString += $textboxSamAccount.text
				}
				ElseIf (($_ -eq "UPN") -or ($_ -eq "UserPrincipalName"))
				{
					$UserPrincipalNameFormatString += $textboxUserLogonName.text
				}
				ElseIf (($_ -eq "Email") -or ($_ -eq "E-Mail"))
				{
					$UserPrincipalNameFormatString += $textboxEmail.text
				}
				ElseIf ($_ -eq "FirstLetterFirstName")
				{
					$UserPrincipalNameFormatString += $textboxFirstName.Text.Substring(0, 1)
				}
				ElseIf ($_ -eq "FirstLetterLastName")
				{
					$UserPrincipalNameFormatString += $textboxLastName.Text.Substring(0, 1)
				}
				ElseIf ($_ -eq "SamAccountName")
				{
					$UserPrincipalNameFormatString += $textboxSamAccount.Text
				}
				ElseIf ($_ -eq "UserPrincipalNameDomain")
				{
					$EmailFormatString += $comboboxDomains.SelectedItem
				}
				ElseIf ($_ -eq "UPNDomain")
				{
					$EmailFormatString += $comboboxDomains.SelectedItem
				}
				Else
				{
					$UserPrincipalNameFormatString += $_
				}
				
			}
			$textboxUserLogonName.Text = [String]::Join('', $UserPrincipalNameFormatString)
		}
	}
}

function Set-DarkMode
{
	$labelCountryCode.ForeColor = 'White'
	$contextmenustrip1.BackColor = "44,44,44"
	$contextmenustrip1.ForeColor = 'White'
	$MainForm.BackColor = "44,44,44"
	$MainForm.ForeColor = 'White'
	
	$labelLogFile.BackColor = "44,44,44"
	$labelLogFile.ForeColor = 'White'
	
	$labelconnectionstatus.ForeColor = 'LightCoral'
	
	
	$richtextboxregistry.ForeColor = 'White'
	$richtextboxregistry.BackColor = "44,44,44"
	
	$groupboxStatus.ForeColor = 'White'
	
	
	$tabpageSettings.BackColor = "44,44,44"
	$tabpageSettings.ForeColor = 'White'
	$groupboxADGroups.ForeColor = 'White'
	
	$menustrip1.BackColor = "44,44,44"
	$menustrip1.ForeColor = 'White'
	
	$menustrip1.Items | ForEach-Object{
		if ($_ -is [System.Windows.Forms.ToolStripMenuItem])
		{
			$_.DropDownItems | ForEach-Object{
				if ($_ -is [System.Windows.Forms.ToolStripMenuItem])
				{
					$_.BackColor = "44,44,44"
					$_.ForeColor = 'White'
					
				}
			}
		}
	}
	
	
	$fileToolStripMenuItem.DropDownItems | ForEach-Object{
		if ($_ -is [System.Windows.Forms.ToolStripMenuItem])
		{
			$_.BackColor = "44,44,44"
			$_.ForeColor = 'White'
			
		}
	}
	
	$copyActiveDirectoryUserToolStripMenuItem.ForeColor = 'White'
	$copyActiveDirectoryUserToolStripMenuItem.BackColor = "44,44,44"
	
	$copyOffice365UserToolStripMenuItem.ForeColor = 'White'
	$copyOffice365UserToolStripMenuItem.BackColor = "44,44,44"
	
	
	$groupboxInformation.ForeColor = 'White'
	$linklabelBradleyWyatt.LinkColor = 'DeepSkyBlue'
	$linklabelGitHub.LinkColor = 'DeepSkyBlue'
	$labelChangelog.ForeColor = 'DeepSkyBlue'
	
	$console.BackColor = "35,35,35"
	$console.ForeColor = 'White'
	
	$buttonExit.ForeColor = "white"
	$buttonExit.BackColor = "35,35,35"
	
	$buttonCreateUser.ForeColor = "white"
	$buttonCreateUser.BackColor = "35,35,35"
	
	$groupboxADUser.ForeColor = 'White'
	$groupboxADUser.BackColor = "44,44,44"
	
	$groupbox2FA.ForeColor = 'White'
	$groupboxOffice365User.ForeColor = 'White'
	
	$tabcontrolUserProperties.ForeColor = 'White'
	$tabcontrolUserProperties.BackColor = "44,44,44"
	
	$tabcontrolUserProperties.TabPages | ForEach-Object{
		$_.ForeColor = 'White'
		$_.BackColor = "44,44,44"
		

	}
	$tabcontrol1.TabPages | ForEach-Object{
		$_.ForeColor = 'White'
		$_.BackColor = "44,44,44"
	}
	
	#GENERAL PAGE
	$groupboxADSync.ForeColor = 'White'
	$panel1.BackColor = "35,35,35"
	$labelDisplayName.ForeColor = 'LightCoral'
	$labelPassword.ForeColor = 'LightCoral'
	$labelConfirmPassword.ForeColor = 'LightCoral'

	$tabpageGeneral.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
				$_.BackColor = "35,35,35"
				$_.ForeColor = 'White'
			
		}
	}
	$buttonGeneratePassword.ForeColor = 'White'
	$buttonGeneratePassword.BackColor = '44,44,44'
	$buttonClear.ForeColor = 'White'
	$buttonClear.BackColor = '44,44,44'
	
	$textboxPasswordGen.ForeColor = 'White'
	$textboxPasswordGen.BackColor = '35,35,35'
	$maskedtextboxpassword.ForeColor = 'White'
	$maskedtextboxpassword.BackColor = '44,44,44'
	$textboxConfirmPassword.BackColor = '44,44,44'
	$textboxConfirmPassword.ForeColor = 'White'
	
	#ACCOUNT PAGE
	$tabpageAccount.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	$comboboxDomains.FlatStyle = 'Flat'
	$comboboxDomains.ForeColor = 'White'
	$comboboxDomains.BackColor = "35,35,35"
	
	$comboboxOUTree.FlatStyle = 'Flat'
	$comboboxOUTree.ForeColor = 'White'
	$comboboxOUTree.BackColor = "35,35,35"
	
	$panel2.ForeColor = 'White'
	$Panel2.BackColor = "35,35,35"
	
	$datetimepickerDATE.ForeColor = 'White'
	$datetimepickerDATE.CalendarMonthBackground = "35,35,35"
	
	$datetimepickerTIME.ForeColor = 'White'
	$datetimepickerTIME.BackColor = "35,35,35"
	
	$labelTimeLeft.ForeColor = 'LightGray'
	$textboxUPNDomain.BackColor = "44,44,44"
	
	$groupboxaccountexpires.ForeColor = 'White'
	$labelUserLogonNameUPN.ForeColor = 'LightCoral'
	$labelUserLogonNamepreWind.ForeColor = 'White'
	
	#ADDRESS PAGE
	
	$tabpageAddress.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	
	#GROUPS PAGE
	$checkedlistboxGroups.ForeColor = 'White'
	$checkedlistboxGroups.BackColor = "35,35,35"
	$textboxPOSIX.ForeColor = 'White'
	$textboxPOSIX.BackColor = "44,44,44"
	
	$textboxSearchGroups.ForeColor = 'White'
	$textboxSearchGroups.BackColor = "35,35,35"
	
	$comboboxPrimaryGroup.FlatStyle = 'Flat'
	$comboboxPrimaryGroup.ForeColor = 'White'
	$comboboxPrimaryGroup.BackColor = "35,35,35"
	
	$groupboxPrimaryGroup.ForeColor = 'White'
	
	#ORGANIZATION PAGE
	$tabpageOrganization.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	
	#PROFILE PAGE
	$groupboxuserprofile.ForeColor = 'White'
	$groupboxHomeFolder.ForeColor = 'White'
	$comboboxDriveLetter.FlatStyle = 'Flat'
	$comboboxDriveLetter.ForeColor = 'White'
	$comboboxDriveLetter.BackColor = "35,35,35"
	$textboxhomedirectory.ForeColor = 'White'
	$textboxhomedirectory.BackColor = "35,35,35"
	$textboxprofilepath.ForeColor = 'White'
	$textboxprofilepath.BackColor = "35,35,35"
	$textboxlogonscript.ForeColor = 'White'
	$textboxlogonscript.BackColor = "35,35,35"
	
	#ATTRIBUTES PAGE
	$tabpageattributes.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	
	
	
	#####OFFICE 365
	$tabcontrolO365.BackColor = "44,44,44"
	$tabcontrolO365.ForeColor = 'White'
	$textboxADSyncServer.ForeColor = 'White'
	#GENERAL PAGE
	$tabpageO365General.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	$tabpageO365General.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.Button])
		{
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	$labelO365userpassword.ForeColor = 'LightCoral'
	$labelO365userconfirmpassword.ForeColor = 'LightCoral'
	$labelO365DisplayName.ForeColor = 'LightCoral'
	$tabpageO365General.BackColor = "44,44,44"
	$groupboxADSync.ForeColor = 'White'
	$textboxADSyncServer.BackColor = "35,35,35"
	$groupboxNoAdSync.ForeColor = 'White'
	$comboboxO365Licenses.FlatStyle = 'Flat'
	$comboboxO365Licenses.BackColor = "35,35,35"
	$comboboxO365Licenses.ForeColor = 'White'
	$panel3.ForeColor = 'White'
	$panel3.BackColor = "35,35,35"
	$panel3.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.Button])
		{
			$_.BackColor = "44,44,44"
			$_.ForeColor = 'White'
			
		}
	}
	$panel3.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	$textboxo365passwordgen.BackColor = "44,44,44"
	If ($buttonConnectToOffice365.Text -eq "*Connect to Office 365")
	{
		$buttonConnectToOffice365.ForeColor = 'Lightcoral'
	}
	
	#ACCOUNT PAGE
	$tabpageO365Account.ForeColor = 'White'
	$tabpageO365Account.BackColor = "44,44,44"
	$tabpageO365Account.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	$tabpageO365Account.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.ComboBox])
		{
			$_.FlatStyle = 'Flat'
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	$labelO365UserPrincipalName.ForeColor = 'LightCoral'
	$panel4.ForeColor = 'White'
	$panel4.BackColor = "35,35,35"
	
	
	#ADDRESS PAGE
	$tabpageO365Address.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	$tabpageO365Address.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.Label])
		{

			$_.ForeColor = 'White'
			
		}
	}
	$tabpageO365Address.BackColor = "44,44,44"
	$tabpageO365Address.ForeColor = 'White'
	
	
	#MAIL GROUPS PAGE
	$tabpageO365Groups.ForeColor = 'White'
	$tabpageO365Groups.BackColor = "44,44,44"
	$labelO365Groups.ForeColor = 'White'
	$labelO365Groups.BackColor = "44,44,44"
	$checkedlistboxDISTROo365groups.ForeColor = 'White'
	$checkedlistboxDISTROo365groups.BackColor = "35,35,35"
	$labelSearch.ForeColor = 'White'
	$textboxO365MailGroups.ForeColor = 'White'
	$textboxO365MailGroups.BackColor = "35,35,35"
	
	
	#SECURITY GROUPS PAGE
	$labelSecurityGroups.ForeColor = 'White'
	$labelSecurityGroups.BackColor = "44,44,44"
	$checkedlistboxO365SecurityGroups.ForeColor = 'White'
	$checkedlistboxO365SecurityGroups.BackColor = "35,35,35"
	$labelSearchGroups2.ForeColor = 'White'
	$labelSearchGroups2.BackColor = "44,44,44"
	$textboxSearchO365SecurityGroups.ForeColor = 'White'
	$textboxSearchO365SecurityGroups.BackColor = "35,35,35"
	$tabpagesecurityGroups.BackColor = "44,44,44"
	$tabpagesecurityGroups.ForeColor = 'White'
	
	#SHARED MAILBOXES PAGE
	$labelsharedmailboxes.ForeColor = 'White'
	$labelsharedmailboxes.BackColor = "44,44,44"
	$tabpageo365shared.ForeColor = 'White'
	$tabpageo365shared.BackColor = "44,44,44"
	$groupboxSettingsSharedMailbox.ForeColor = 'White'
	$groupboxSettingsSharedMailbox.BackColor = "44,44,44"
	$groupboxSettingsSharedMailbox.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.Label])
		{
			$_.BackColor = "44,44,44"
			$_.ForeColor = 'White'
			
		}
	}
	$groupboxSettingsSharedMailbox.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.Combobox])
		{
			$_.FlatStyle = 'Flat'
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	$checkedlistboxsharedmailboxes.ForeColor = 'White'
	$checkedlistboxsharedmailboxes.BackColor = "35,35,35"
	
	
	#ATTRIBUTES PAGE
	$tabpageO365Attributes.ForeColor = "White"
	$tabpageO365Attributes.BackColor = "44,44,44"
	$comboboxO365HidefromGAL.FlatStyle = 'Flat'
	$comboboxO365HidefromGAL.ForeColor = 'White'
	$comboboxO365HidefromGAL.BackColor = "35,35,35"
	
	$comboboxOWA.FlatStyle = 'Flat'
	$comboboxOWA.ForeColor = 'White'
	$comboboxOWA.BackColor = "35,35,35"
	
	$comboboxActiveSync.FlatStyle = 'Flat'
	$comboboxActiveSync.ForeColor = 'White'
	$comboboxActiveSync.BackColor = "35,35,35"
	
	
}

function Set-LightMode
{
	$labelCountryCode.ForeColor = 'Black'
	$contextmenustrip1.BackColor = "WhiteSmoke"
	$contextmenustrip1.ForeColor = 'Black'
	$MainForm.BackColor = "WhiteSmoke"
	$MainForm.ForeColor = 'Black'
	
	$labelLogFile.BackColor = "White"
	$labelLogFile.ForeColor = 'Black'
	
	$labelconnectionstatus.ForeColor = 'FireBrick'
	
	$richtextboxregistry.ForeColor = 'Black'
	$richtextboxregistry.BackColor = "White"
	
	$groupboxStatus.ForeColor = 'Black'
	
	
	$tabpageSettings.BackColor = "White"
	$tabpageSettings.ForeColor = 'Black'
	$groupboxADGroups.ForeColor = 'Black'
	
	$menustrip1.BackColor = "White"
	$menustrip1.ForeColor = 'Black'
	
	$menustrip1.Items | ForEach-Object{
		if ($_ -is [System.Windows.Forms.ToolStripMenuItem])
		{
			$_.DropDownItems | ForEach-Object{
				if ($_ -is [System.Windows.Forms.ToolStripMenuItem])
				{
					$_.BackColor = "White"
					$_.ForeColor = 'Black'
					
				}
			}
		}
	}
	
	
	$fileToolStripMenuItem.DropDownItems | ForEach-Object{
		if ($_ -is [System.Windows.Forms.ToolStripMenuItem])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	
	$copyActiveDirectoryUserToolStripMenuItem.ForeColor = 'Black'
	$copyActiveDirectoryUserToolStripMenuItem.BackColor = "White"
	
	$copyOffice365UserToolStripMenuItem.ForeColor = 'Black'
	$copyOffice365UserToolStripMenuItem.BackColor = "White"
	
	
	$groupboxInformation.ForeColor = 'Black'
	$linklabelBradleyWyatt.LinkColor = '0, 0, 255'
	$linklabelGitHub.LinkColor = '0, 0, 255'
	$labelChangelog.ForeColor = '0, 0, 255'
	
	$console.BackColor = "White"
	$console.ForeColor = 'Black'
	
	$buttonExit.ForeColor = "Black"
	$buttonExit.BackColor = "White"
	
	$buttonCreateUser.ForeColor = "Black"
	$buttonCreateUser.BackColor = "White"
	
	$groupboxADUser.ForeColor = 'Black'
	$groupboxADUser.BackColor = "White"
	
	$groupbox2FA.ForeColor = 'Black'
	$groupboxOffice365User.ForeColor = 'Black'
	
	$tabcontrolUserProperties.ForeColor = 'Black'
	$tabcontrolUserProperties.BackColor = "White"
	
	$tabcontrolUserProperties.TabPages | ForEach-Object{
		$_.ForeColor = 'Black'
		$_.BackColor = "White"
		
		
	}
	$tabcontrol1.TabPages | ForEach-Object{
		$_.ForeColor = 'Black'
		$_.BackColor = "White"
	}
	
	#GENERAL PAGE
	$panel1.BackColor = "MenuBar"
	$labelDisplayName.ForeColor = 'FireBrick'
	$labelPassword.ForeColor = 'FireBrick'
	$labelConfirmPassword.ForeColor = 'FireBrick'
	
	$tabpageGeneral.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	$buttonGeneratePassword.ForeColor = 'Black'
	$buttonGeneratePassword.BackColor = 'White'
	$buttonClear.ForeColor = 'Black'
	$buttonClear.BackColor = 'White'
	
	$textboxPasswordGen.ForeColor = 'Black'
	$textboxPasswordGen.BackColor = 'White'
	$maskedtextboxpassword.ForeColor = 'Black'
	$maskedtextboxpassword.BackColor = 'White'
	$textboxConfirmPassword.BackColor = 'White'
	$textboxConfirmPassword.ForeColor = 'Black'
	
	#ACCOUNT PAGE
	$tabpageAccount.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	$comboboxDomains.FlatStyle = 'Standard'
	$comboboxDomains.ForeColor = 'Black'
	$comboboxDomains.BackColor = "Window"
	
	$comboboxOUTree.FlatStyle = 'Standard'
	$comboboxOUTree.ForeColor = 'Black'
	$comboboxOUTree.BackColor = "Window"
	
	$panel2.ForeColor = 'Black'
	$Panel2.BackColor = "MenuBar"
	
	$datetimepickerDATE.ForeColor = 'Black'
	$datetimepickerDATE.CalendarMonthBackground = "White"
	
	$datetimepickerTIME.ForeColor = 'Black'
	$datetimepickerTIME.BackColor = "White"
	
	$labelTimeLeft.ForeColor = 'LightGray'
	$textboxUPNDomain.BackColor = "White"
	
	$groupboxaccountexpires.ForeColor = 'Black'
	$labelUserLogonNameUPN.ForeColor = 'FireBrick'
	$labelUserLogonNamepreWind.ForeColor = 'Black'
	
	#ADDRESS PAGE
	
	$tabpageAddress.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	
	#GROUPS PAGE
	$checkedlistboxGroups.ForeColor = 'Black'
	$checkedlistboxGroups.BackColor = "White"
	$textboxPOSIX.ForeColor = 'Black'
	$textboxPOSIX.BackColor = "White"
	
	$textboxSearchGroups.ForeColor = 'Black'
	$textboxSearchGroups.BackColor = "White"
	
	$comboboxPrimaryGroup.FlatStyle = 'Standard'
	$comboboxPrimaryGroup.ForeColor = 'Black'
	$comboboxPrimaryGroup.BackColor = "Window"
	
	$groupboxPrimaryGroup.ForeColor = 'Black'
	
	#ORGANIZATION PAGE
	$tabpageOrganization.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	
	#PROFILE PAGE
	$groupboxuserprofile.ForeColor = 'Black'
	$groupboxHomeFolder.ForeColor = 'Black'
	$comboboxDriveLetter.FlatStyle = 'Standard'
	$comboboxDriveLetter.ForeColor = 'Black'
	$comboboxDriveLetter.BackColor = "Window"
	$textboxhomedirectory.ForeColor = 'Black'
	$textboxhomedirectory.BackColor = "White"
	$textboxprofilepath.ForeColor = 'Black'
	$textboxprofilepath.BackColor = "White"
	$textboxlogonscript.ForeColor = 'Black'
	$textboxlogonscript.BackColor = "White"
	
	#ATTRIBUTES PAGE
	$tabpageattributes.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	
	
	
	#####OFFICE 365
	$tabcontrolO365.BackColor = "White"
	$tabcontrolO365.ForeColor = 'Black'
	$textboxADSyncServer.ForeColor = 'Black'
	#GENERAL PAGE
	$tabpageO365General.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	$tabpageO365General.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.Button])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	$labelO365userpassword.ForeColor = 'FireBrick'
	$labelO365userconfirmpassword.ForeColor = 'FireBrick'
	$labelO365DisplayName.ForeColor = 'FireBrick'
	$tabpageO365General.BackColor = "White"
	$groupboxADSync.ForeColor = 'Black'
	$textboxADSyncServer.BackColor = "White"
	$groupboxNoAdSync.ForeColor = 'Black'
	$comboboxO365Licenses.FlatStyle = 'Standard'
	$comboboxO365Licenses.BackColor = "Window"
	$comboboxO365Licenses.ForeColor = 'Black'
	$panel3.ForeColor = 'Black'
	$panel3.BackColor = "MenuBar"
	$panel3.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.Button])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	$panel3.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	$textboxo365passwordgen.BackColor = "White"
	If ($buttonConnectToOffice365.Text -eq "*Connect to Office 365")
	{
		$buttonConnectToOffice365.ForeColor = 'Firebrick'
	}
	
	#ACCOUNT PAGE
	$tabpageO365Account.ForeColor = 'Black'
	$tabpageO365Account.BackColor = "White"
	$tabpageO365Account.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	$tabpageO365Account.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.ComboBox])
		{
			$_.FlatStyle = 'Standard'
			$_.BackColor = "Window"
			$_.ForeColor = 'Black'
			
		}
	}
	$labelO365UserPrincipalName.ForeColor = 'FireBrick'
	$panel4.ForeColor = 'Black'
	$panel4.BackColor = "MenuBar"
	
	
	#ADDRESS PAGE
	$tabpageO365Address.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	$tabpageO365Address.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.Label])
		{
			
			$_.ForeColor = 'Black'
			
		}
	}
	$tabpageO365Address.BackColor = "White"
	$tabpageO365Address.ForeColor = 'Black'
	
	
	#MAIL GROUPS PAGE
	$tabpageO365Groups.ForeColor = 'Black'
	$tabpageO365Groups.BackColor = "White"
	$labelO365Groups.ForeColor = 'Black'
	$labelO365Groups.BackColor = "White"
	$checkedlistboxDISTROo365groups.ForeColor = 'Black'
	$checkedlistboxDISTROo365groups.BackColor = "White"
	$labelSearch.ForeColor = 'Black'
	$textboxO365MailGroups.ForeColor = 'Black'
	$textboxO365MailGroups.BackColor = "White"
	
	
	#SECURITY GROUPS PAGE
	$labelSecurityGroups.ForeColor = 'Black'
	$labelSecurityGroups.BackColor = "White"
	$checkedlistboxO365SecurityGroups.ForeColor = 'Black'
	$checkedlistboxO365SecurityGroups.BackColor = "White"
	$labelSearchGroups2.ForeColor = 'Black'
	$labelSearchGroups2.BackColor = "White"
	$textboxSearchO365SecurityGroups.ForeColor = 'Black'
	$textboxSearchO365SecurityGroups.BackColor = "White"
	$tabpagesecurityGroups.BackColor = "White"
	$tabpagesecurityGroups.ForeColor = 'Black'
	
	#SHARED MAILBOXES PAGE
	$labelsharedmailboxes.ForeColor = 'Black'
	$labelsharedmailboxes.BackColor = "White"
	$tabpageo365shared.ForeColor = 'Black'
	$tabpageo365shared.BackColor = "White"
	$groupboxSettingsSharedMailbox.ForeColor = 'Black'
	$groupboxSettingsSharedMailbox.BackColor = "White"
	$groupboxSettingsSharedMailbox.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.Label])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	$groupboxSettingsSharedMailbox.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.Combobox])
		{
			$_.FlatStyle = 'Standard'
			$_.BackColor = "Window"
			$_.ForeColor = 'Black'
			
		}
	}
	$checkedlistboxsharedmailboxes.ForeColor = 'Black'
	$checkedlistboxsharedmailboxes.BackColor = "White"
	
	
	#ATTRIBUTES PAGE
	$tabpageO365Attributes.ForeColor = "Black"
	$tabpageO365Attributes.BackColor = "White"
	$comboboxO365HidefromGAL.FlatStyle = 'Standard'
	$comboboxO365HidefromGAL.ForeColor = 'Black'
	$comboboxO365HidefromGAL.BackColor = "Window"
	
	
	$comboboxOWA.FlatStyle = 'Standard'
	$comboboxOWA.ForeColor = 'Black'
	$comboboxOWA.BackColor = "Window"
	
	$comboboxActiveSync.FlatStyle = 'Standard'
	$comboboxActiveSync.ForeColor = 'Black'
	$comboboxActiveSync.BackColor = "Window"
	
}

function Copy-ADUserAttributes
{
	Add-Logs -text "LOG: Setting Description"
	$textboxDescription.Text = $UserTemplate.Description
	Add-Logs -text "LOG: Setting Office"
	$textboxoffice.Text = $UserTemplate.Office
	Add-Logs -text "LOG: Setting Office Phone"
	$textboxTelephone.Text = $UserTemplate.OfficePhone
	Add-Logs -text "LOG: Setting Email Address"
	$textboxEmail.Text = $UserTemplate.EmailAddress
	Add-Logs -text "LOG: Setting Home Page"
	$textboxWebPage.Text = $UserTemplate.HomePage
	
	Add-Logs -text "LOG: Changing the OU for the user to $((($UserTemplate.CanonicalName).TrimEnd("/$($UserTemplate.DisplayName)")))"
	$comboboxOUTree.SelectedItem = (($UserTemplate.CanonicalName).TrimEnd("/$($UserTemplate.DisplayName)"))
	
	Add-Logs -text "LOG: Checking Password Never Expires status"
	If ($UserTemplate.PasswordNeverExpires -eq $true)
	{
		Add-Logs -text "LOG: Setting Password Never Expires to True"
		$checkboxPasswordNeverExpires.CheckState = 'Checked'
	}
	Else
	{
		Add-Logs -text "LOG: Setting Password Never Expires to False"
		$checkboxPasswordNeverExpires.CheckState = 'UnChecked'
	}
	
	Add-Logs -text "LOG: Checking Password Change Ability"
	If ($UserTemplate.CannotChangePassword -eq $True)
	{
		Add-Logs -text "LOG: Setting User Cannot Change Password to True"
		$checkboxUserCannotChangePass.CheckState -eq 'Checked'
	}
	Else
	{
		Add-Logs -text "LOG: Setting User Cannot Change Password to False"
		$checkboxUserCannotChangePass.CheckState -eq 'UnChecked'
	}
	
	Add-Logs -text "LOG: Checking Password Change statue"
	If ($UserTemplate.PasswordExpired -eq $True)
	{
		Add-Logs -text "LOG: Setting User Must Change Password to True"
		$checkboxUserMustChangePasswo.CheckState -eq 'Checked'
	}
	Else
	{
		Add-Logs -text "LOG: Setting User Must Change Password to False"
		$checkboxUserMustChangePasswo.CheckState -eq 'UnChecked'
	}
	Add-Logs -text "LOG: Setting Street Address"
	$textboxStreet.Text = $UserTemplate.StreetAddress
	Add-Logs -text "LOG: Setting PO Box"
	$textboxPOBox.Text = $UserTemplate.POBox
	Add-Logs -text "LOG: Setting City"
	$textboxcity.Text = $UserTemplate.City
	Add-Logs -text "LOG: Setting State"
	$textboxstate.Text = $UserTemplate.State
	Add-Logs -text "LOG: Setting Postal Code"
	$textboxzipcode.Text = $UserTemplate.PostalCode
	Add-Logs -text "LOG: Checking Group Memberships"
	$checkedlistboxGroups.CheckedItems = $null
	$CacheGroups = "$env:TEMP\MUCCacheGroups.txt"
	$click = 1
	($UserTemplate).MemberOf | ForEach-Object {
		$GName = (Get-ADGroup $_).name
		Add-Logs -text "LOG: Adding User to the Group: $GName"
		
		$GName | Out-File $CacheGroups -Append -Force -ErrorAction SilentlyContinue
		$checkedlistboxGroups.SelectedItem = $GName
		$index = $checkedlistboxGroups.SelectedIndex
		$checkedlistboxGroups.SetItemCheckState($index, 'Checked')
	}
	$click = 0
	Add-Logs -text "LOG: Setting Job Title"
	$textboxjobtitle.text = $UserTemplate.Title
	Add-Logs -text "LOG: Setting Department"
	$textboxDepartment.Text = $UserTemplate.Department
	Add-Logs -text "LOG: Setting Company"
	$textboxCompany.Text = $UserTemplate.Company
	Add-Logs -text "LOG: Setting Profile Path"
	$textboxprofilepath.Text = $UserTemplate.ProfilePath
	Add-Logs -text "LOG: Setting Script Path"
	$textboxlogonscript.Text = $UserTemplate.ScriptPath
	Add-Logs -text "LOG: Setting Home Drive"
	$comboboxDriveLetter.SelectedItem = $UserTemplate.HomeDrive
	Add-Logs -text "LOG: Setting Home Directory"
	$textboxhomedirectory.Text = $UserTemplate.HomeDirectory
	Add-Logs -text "LOG: Setting Employee Type"
	$textboxemployeeType.Text = $UserTemplate.EmployeeType
	
	Add-Logs -text "LOG: Done"
	
	
}

function Copy-O365UserAttributes
{
	Get-Item 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' -Force | Set-ItemProperty -Name CopyO365User -Value 1 -Force | Out-Null
	
	If ($Licenses2Add.count -gt 0)
	{
		$Global:Licenses2Add = New-Object 'System.Collections.Generic.List[System.Object]'
	}
	
	$CopyUser = $CopyFromO365User_comboboxcopyuser
	add-logs -text "LOG: Copying attributes from $CopyUser"
	
	$UserObj = (Get-Msoluser -All | Where-Object { $_.DisplayName -eq $CopyUser }) | Select-Object -First 1
	
	add-logs -text "LOG: Getting the UPN Domain of $CopyUser"
	$UPNDomain = ($UserObj.userprincipalname).split('@') | Select-Object -Last 1
	add-logs -text "LOG: Setting the UPN Domain to $UPNDomain"
	$comboboxO365Domains.SelectedItem = "@"+$UPNDomain
	
	add-logs -text "LOG: Copying Country Code"
	$comboboxO365countrycode.SelectedText = ($UserObj).CountryCode
	add-logs -text "LOG: Checking MFA status of $CopyUser"
	If ($null -eq $UserObj.StrongAuthenticationRequirements.State)
	{
		add-logs -text "LOG: Setting MFA to False"
		$comboboxMFA.SelectedItem = "False"
	}
	Else
	{
		add-logs -text "LOG: Setting MFA to True"
		$comboboxMFA.SelectedItem = "True"
	}
	add-logs -text "LOG: Copying City"
	$textboxo365city.Text = ($UserObj).city
	add-logs -text "LOG: Copying State"
	$textboxo365state.Text = ($UserObj).state
	add-logs -text "LOG: Copying Street Address"
	$textboxO365street.Text = ($UserObj).streetaddress
	add-logs -text "LOG: Copying Postal Code"
	$textboxo365zip.Text = ($UserObj).postalcode
	
	If (($UserObj).PasswordNeverExpires -eq $true)
	{
		add-logs -text "LOG: Copying Password Never Expires Flag"
		$checkboxO365PasswordNeverExpires.CheckState = 'Checked'
	}
	
	If (($UserObj).BlockCredential -eq $True)
	{
		add-logs -text "LOG: Copying Disabled Account State"
		$checkboxBlockCred.CheckState = 'Checked'
	}
	

	
	add-logs -text "LOG: Getting all licenses assinged to $CopyUser"
	$currentlicenses = ($UserObj).Licenses.accountskuid
	foreach ($currentlicense in $currentlicenses)
	{
		$TenantSku = Get-MSOLAccountSku | Where-Object { $_.AccountSkuID -match $currentlicense }
		
		If ($TenantSku.ActiveUnits -ne $TenantSku.ConsumedUnits)
		{
			$lic = $currentlicense -split ":" | Select-Object -Last 1
			#lookup skus in hashtable and convert to friendly name
			$FriendlyName = $Sku.Item("$Lic")
			If ($null -eq $FriendlyName)
			{
				add-logs -text "LOG: Copying The License: $_"
				$obj = [PSCustomObject]@{
					'Name' = $lic
				}
				$Licenses2Add.Add($obj)
			}
			Else
			{
				add-logs -text "LOG: Copying The License: $FriendlyName"
				$obj = [PSCustomObject]@{
					'Name' = $FriendlyName
				}
				
				$Licenses2Add.Add($obj)
				
			}
		}
	}
	
	$comboboxO365Licenses.text = "Selected Licenses: $($Licenses2Add.count)"
	Toogle-LicenseStatus
	
	add-logs -text "LOG: Checking Mail Group Membership for $CopyUser"
	Get-MsolGroup -All | Where-Object { ($_.GroupType -eq "DistributionList") -or ($_.GroupType -eq "MailEnabledSecurity") } | ForEach-Object {
		If (Get-MsolGroupMember -All -GroupObjectId $_.ObjectID | Where-Object { $_.EmailAddress -contains ($UserObj.ProxyAddresses -cmatch 'SMTP:').trim("SMTP:")})
		{
				If ($checkedlistboxDISTROo365groups.Items -contains $_.DisplayName)
				{
					$_.DisplayName | Out-File $CacheDistroGroupsFile -Append -Force -ErrorAction SilentlyContinue
					add-logs -text "LOG: Adding User to the Distribution Group: $($_.DisplayName)"
					$checkedlistboxDISTROo365groups.SelectedItem = $($_.DisplayName)
					$index = $checkedlistboxDISTROo365groups.SelectedIndex
					$checkedlistboxDISTROo365groups.SetItemCheckState($index, 'Checked')
				}
			}
		
		
	}
	Add-Logs -text "LOG: Getting all Security Groups $CopyUser is a Member of"
	Get-MsolGroup -All | Where-Object { $_.GroupType -eq "Security" } | ForEach-Object {
		If (Get-MsolGroupMember -All -GroupObjectId $_.ObjectID | Where-Object { $_.EmailAddress -contains ($UserObj.ProxyAddresses -cmatch 'SMTP:').trim("SMTP:") })
		{
				If ($checkedlistboxO365SecurityGroups.Items -contains $_.DisplayName)
				{
					$_.DisplayName | Out-File $CacheSecurityGroupsFile -Append -Force -ErrorAction SilentlyContinue
				add-logs -text "LOG: Adding User to the Security Group: $($_.DisplayName)"
					$checkedlistboxO365SecurityGroups.SelectedItem = $($_.DisplayName)
					$index = $checkedlistboxO365SecurityGroups.SelectedIndex
					$checkedlistboxO365SecurityGroups.SetItemCheckState($index, 'Checked')
				}
			}
			
			
		}
	
	
	
	$UserObjMailbox = Get-Mailbox (($UserObj.ProxyAddresses -cmatch 'SMTP:').trim("SMTP:"))
	Add-Logs -text "LOG: Gettings GAL status for User"
	If ($UserObjMailbox.HiddenFromAddressListsEnabled -eq $true)
	{
		Add-Logs -text "LOG: Hiding User from GAL: True"
		$comboboxO365HidefromGAL.SelectedItem = "True"
	}
	Else
	{
		Add-Logs -text "LOG: Hiding User from GAL: False"
		$comboboxO365HidefromGAL.SelectedItem = "False"
	}
	
	Add-Logs -text "LOG: Getting Outlook on the Web (OWA) Status for user"
	If (((Get-CASMailbox (($UserObjMailbox).GUID).Guid).OWAEnabled) -eq $True)
	{
		Add-Logs -text "LOG: Outlook on the Web (OWA): True"
		$comboboxOWA.SelectedItem = "True"
	}
	Else
	{
		Add-Logs -text "LOG: Outlook on the Web (OWA): False"
		$comboboxOWA.SelectedItem = "False"
	}
	
	Add-Logs -text "LOG: Getting ActiveSync Status for user"
	If (((Get-CASMailbox (($UserObjMailbox).GUID).Guid).ActiveSync) -eq $True)
	{
		Add-Logs -text "LOG: ActiveSync: True"
		$comboboxActiveSync.SelectedItem = "True"
	}
	Else
	{
		Add-Logs -text "LOG: ActiveSync: False"
		$comboboxActiveSync.SelectedItem = "False"
	}
	
	add-logs -text "LOG: Done"
	
	Get-Item 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' -Force | Set-ItemProperty -Name CopyO365User -Value 0 -Force | Out-Null
	
}

function License-MUCO365User
{
	$licenseforuser = @()
	#$Lookup = @()
	Add-Logs -text "LOG: Getting License selected for user"
	$Licenses = $Licenses2Add
	Add-Logs "LOG: We will be adding the licenses, $Licenses2Add"
	Add-Logs -text "LOG: Getting AccountSKU Domain"
	$LicenseDomain = ((((Get-MsolAccountSku).AccountSkuID) -split ":" | Select-Object -First 1) + ":").Trim()
	foreach ($License in $licenses)
	{
		Add-Logs -text "LOG: Looking up SKU for license"
		$Lookup = $Sku.keys | Where-Object { $Sku["$_"] -eq "$license" }
		Add-Logs "LOG: License lookup is $Lookup"
		If ((($Lookup | Measure-Object -Character).Characters) -lt 1)
		{
			Add-Logs -text "LOG: No SKU found during lookup"
			$BackSKU = "$LicenseDomain$License"
			Add-Logs -text "LOG: Checking if $BackSKU is already SKU"
			$CheckSku = Get-MSOLAccountSku | Where-Object { $_.AccountSKuID -like "*$BackSKU*" } | Select-Object -ExpandProperty AccountSkuID
			If ($CheckSku -ne $Null)
			{
				Add-Logs -text "LOG: Assigning $BackSKU to User"
				$licenseforuser += $CheckSku
			}
			Else
			{
				Add-Logs -text "WARN: Uknown license, could not assign $BackSKU"
				$ReLic = (((Get-MsolAccountSku).AccountSkuID) | Select-Object -First 1)
				Add-Logs -text "WARN: Assigning $ReLic to user instead"
				$licenseforuser += (((Get-MsolAccountSku).AccountSkuID) | Select-Object -First 1)
			}
		}
		
		Else
		{
			Add-Logs -text "LOG: Found the SKU for the license"
			$Lookup | ForEach-Object {
				Add-Logs -text "LOG: Checking License $_"
				$BackSKU = "$LicenseDomain$_"
				Add-Logs -text "LOG: Looking up $BackSKU in tenant"
				Add-Logs -text "LOG: Verifying $BackSKU in tenant"
				$CheckSku = Get-MSOLAccountSku | Where-Object { $_.AccountSKuID -like "*$BackSKU*" } | Select-Object -ExpandProperty AccountSkuID
				If ($CheckSku -ne $Null)
				{
					Add-Logs -text "LOG: License Found, assigning $CheckSku to user"
					$licenseforuser += $CheckSku
				}
				Else
				{
					Add-Logs -text "WARN: $BackSKU was not found in tenant"
				}
			}
		}
		Add-Logs "LOG: OUTPUTTING $licenseforuser"
		$licenseforuser | Out-File "$env:TEMP\MUClicenseforuser.txt" -Force
		
	}
}

function New-MUCUser
{
		
	add-logs -text 'LOG: Converting password to SecureString'
	add-logs -text 'CMD: ConvertTo-SecureString -String $textboxConfirmPassword.Text'
	$PasswordSecureString = $textboxConfirmPassword.Text | ConvertTo-SecureString -AsPlainText -Force
	#Get disable account boolean
	add-logs -text 'LOG: Checking if account is disabled or enabled'
	$disabledaccount = ($checkboxAccountIsDisabled.checked)
	#If account should be disabled
	If ($disabledaccount -eq $true)
	{
		add-logs -text 'LOG: Account is disabled'
		add-logs -text 'LOG: Creating user'
		Try
		{
			New-ADUser -Name ($textboxDisplayName.Text) -GivenName ($textboxFirstName.Text) -Surname ($textboxLastName.Text) -Initials ($textboxInitials.Text) -DisplayName ($textboxDisplayName.Text) -SamAccountName ($textboxSamAccount.text) -UserPrincipalName (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem)) -EmailAddress ($textboxEmail.Text) -Description ($textboxDescription.Text) -Office ($textboxoffice.text) -OfficePhone ($textboxTelephone.text) -HomePage ($textboxWebPage.text) -StreetAddress ($textboxStreet.text) -State ($textboxstate.text) -PostalCode ($textboxzipcode.Text) -City ($textboxcity.text) -Title ($textboxjobtitle.text) -Department ($textboxDepartment.text) -Company ($textboxCompany.text) -POBox ($textboxPOBox.text) -ProfilePath ($textboxprofilepath.text) -ScriptPath ($textboxlogonscript.text) -PasswordNeverExpires ($checkboxPasswordNeverExpires.Checked) -Enabled $false -CannotChangePassword ($checkboxUserCannotChangePass.checked) -ChangePasswordAtLogon ($checkboxUserMustChangePasswo.Checked) -AccountPassword $PasswordSecureString -HomeDrive $comboboxDriveLetter.SelectedItem -HomeDirectory $textboxhomedirectory.Text
		}
		Catch
		{
			add-logs -text "WARN: $_"
			$InfoMessage = $_
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		$User = Get-ADUser -Filter * -Properties * | Where-Object { ($_.Name -eq $textboxDisplayName.text) -and ($_.UserPrincipalName -eq (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem))) }
		add-logs -text "LOG: User has been created"
		
		#Check if Account is set to expire at a specific time
		Add-Logs -text "LOG: Checking if User account expiration is set"
		If ($radiobuttonExpireOn.Checked -eq $true)
		{
			Add-Logs -text "LOG: User account expiration is set"
			$Timespan = (($datetimepickerDATE.Value.ToLongDateString()) + " " + $datetimepickerTIME.Value.ToShortTimeString())
			Add-Logs -text "Account will be disabled on $Timespan"
			Set-ADAccountExpiration -Identity $textboxSamAccount.Text -DateTime $Timespan
			Add-Logs -text "LOG: Done"
		}
		Else
		{
			Add-Logs -text "LOG: User account expiration not set"
		}
		
		$Proxys = @()
		add-logs -text "LOG: Getting user proxy addresses to set"
		$Proxys += $textboxproxyaddress.Lines
		If ($Proxys -ne $Null)
		{
			foreach ($Proxy in $Proxys)
			{
				add-logs -text "LOG: Adding proxy addresses"
				add-logs -text "LOG: Getting user proxy addresses to set"
				add-logs -text "CMD: Set-ADUser $User -Add @{ proxyAddresses = $Proxy }"
				Set-ADUser $User -Add @{ proxyAddresses = $Proxy }
			}
		}
		Else
		{
			add-logs -text "LOG: No proxys were found to add"
		}
		add-logs -text "LOG: Done with Proxys"
		
		
		
		add-logs -text "LOG: Getting user employeeType attribute to set"
		If ($textboxemployeeType.text -ne "")
		{
			add-logs -text "LOG: Adding employeetype: $($textboxemployeeType.text) to user"
			Set-ADUser $User -Add @{ EmployeeType = $textboxemployeeType.text }
		}
		Else
		{
			add-logs -text "LOG: No employeeType to add"
		}
		add-logs -text "LOG: Done with employeeType"
		
		add-logs -text "LOG: Getting user employeeNumber attribute to set"
		If ($textboxemployeenumber.text -ne "")
		{
			add-logs -text "LOG: Adding employeeNumber: $($textboxemployeenumber.text) to user"
			Set-ADUser $User -EmployeeNumber $textboxemployeenumber.text 
		}
		Else
		{
			add-logs -text "LOG: No employeeNumber to add"
		}
		add-logs -text "LOG: Done with employeeNumber"
		
		add-logs -text "LOG: Getting user employeeID attribute to set"
		If ($textboxEmployeeID.Text -ne "")
		{
			add-logs -text "LOG: Adding employeeID: $($textboxEmployeeID.text) to user"
			Set-ADUser $User -EmployeeID $textboxEmployeeID.text
		}
		Else
		{
			add-logs -text "LOG: No employeeID to add"
		}
		add-logs -text "LOG: Done with employeeID"
		
		#Find if user should be added to any groups
		add-logs -text 'LOG: Getting checked groups'
		$groups = $checkedlistboxGroups.CheckedItems
		If ($groups -ne $null)
		{
			add-logs -text 'LOG: Groups found'
			foreach ($group in $groups)
			{
				add-logs -text "LOG: Adding $User to $Group"
				add-logs -text "CMD: Add-ADGroupMember -Identity $Group -Members $User"
				Add-ADGroupMember -Identity $Group -Members $User
			}
		}
		Else
		{
			add-logs -text 'LOG: No Groups checked'
		}
		Add-Logs -text "LOG: Done"
		
		Add-Logs -text "LOG: Checking if primary group is set other than the default of Domain Users"
		If ($comboboxPrimaryGroup.Text -eq "Domain Users")
		{
			Add-Logs -text "LOG: Primary Group set to Domain Users"
		}
		Else
		{
			$PrimaryGroup = $comboboxPrimaryGroup.Text
			Add-Logs -text "LOG: Setting Primary Group to $PrimaryGroup"
			Add-Logs -text "CMD: `$Group = Get-ADGroup $PrimaryGroup -properties @('primaryGroupToken')"
			$Group = Get-ADGroup $PrimaryGroup -properties @("primaryGroupToken")
			Add-Logs -text "CMD: Set-ADUser -identity `$User -Replace @{ primarygroupid = `$group.primaryGroupToken }"
			Set-ADUser -identity $User.SamAccountName -Replace @{ primarygroupid = $group.primaryGroupToken }
		}
		Add-Logs -text "LOG: Done"
		
		add-logs -text 'LOG: Checking if user is being put in an specific OU'
		If ($comboboxOUTree.Text -ne $Null)
		{
			
			add-logs -text 'LOG: Specific OU specified, moving user'
			$CanocicalName = $comboboxOUTree.text
			add-logs -text "CMD: `$OUTOMove = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Where-Object { `$_.CanonicalName -eq $CanocicalName }).DistinguishedName"
			$OUTOMove = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Where-Object { $_.CanonicalName -eq $CanocicalName }).DistinguishedName
			add-logs -text "CMD: `$User | Move-ADObject -TargetPath $OUTOMove"
			$User | Move-ADObject -TargetPath $OUTOMove
			add-logs -text 'LOG: Done'
		}
		Else
		{
			add-logs -text 'LOG: No OU Specified, skipping'
		}
	}
	Else
	{
		add-logs -text 'LOG: Account is enabled'
		add-logs -text 'LOG: Creating user'
		Try
		{
			New-ADUser -Name ($textboxDisplayName.Text) -GivenName ($textboxFirstName.Text) -Surname ($textboxLastName.Text) -Initials ($textboxInitials.Text) -DisplayName ($textboxDisplayName.Text) -SamAccountName ($textboxSamAccount.text) -UserPrincipalName (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem)) -EmailAddress ($textboxEmail.Text) -Description ($textboxDescription.Text) -Office ($textboxoffice.text) -OfficePhone ($textboxTelephone.text) -HomePage ($textboxWebPage.text) -StreetAddress ($textboxStreet.text) -State ($textboxstate.text) -PostalCode ($textboxzipcode.Text) -City ($textboxcity.text) -Title ($textboxjobtitle.text) -Department ($textboxDepartment.text) -Company ($textboxCompany.text) -POBox ($textboxPOBox.text) -ProfilePath ($textboxprofilepath.text) -ScriptPath ($textboxlogonscript.text) -PasswordNeverExpires ($checkboxPasswordNeverExpires.Checked) -Enabled $true -CannotChangePassword ($checkboxUserCannotChangePass.checked) -ChangePasswordAtLogon ($checkboxUserMustChangePasswo.Checked) -AccountPassword $PasswordSecureString -HomeDrive $comboboxDriveLetter.SelectedItem -HomeDirectory $textboxhomedirectory.Text
		}
		Catch
		{
			add-logs -text "WARN: $_"
			$InfoMessage = $_
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		$User = Get-ADUser -Filter * -Properties * | Where-Object { ($_.Name -eq $textboxDisplayName.text) -and ($_.UserPrincipalName -eq (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem))) }
		add-logs -text "LOG: User has been created"
		
		#Check if Account is set to expire at a specific time
		Add-Logs -text "LOG: Checking if User account expiration is set"
		If ($radiobuttonExpireOn.Checked -eq $true)
		{
			Add-Logs -text "LOG: User account expiration is set"
			$Timespan = (($datetimepickerDATE.Value.ToLongDateString()) + " " + $datetimepickerTIME.Value.ToShortTimeString())
			Add-Logs -text "Account will be disabled on $Timespan"
			Set-ADAccountExpiration -Identity $textboxSamAccount.Text -DateTime $Timespan
			Add-Logs -text "LOG: Done"
		}
		Else
		{
			Add-Logs -text "LOG: User account expiration not set"
		}
		
		$Proxys = @()
		add-logs -text "LOG: Getting user proxy addresses to set"
		$Proxys += $textboxproxyaddress.Lines
		If ($Proxys -ne $Null)
		{
			foreach ($Proxy in $Proxys)
			{
				add-logs -text "LOG: Adding proxy addresses"
				add-logs -text "LOG: Getting user proxy addresses to set"
				add-logs -text "CMD: Set-ADUser $User -Add @{ proxyAddresses = $Proxy }"
				Set-ADUser $User -Add @{ proxyAddresses = $Proxy }
			}
		}
		Else
		{
			add-logs -text "LOG: No proxys were found to add"
		}
		add-logs -text "LOG: Done with Proxys"
		
		add-logs -text "LOG: Getting user employeeType attribute to set"
		If ($textboxemployeeType.text -ne "")
		{
			add-logs -text "LOG: Adding employeetype: $($textboxemployeeType.text) to user"
			Set-ADUser $User -Add @{ EmployeeType = $textboxemployeeType.text }
		}
		Else
		{
			add-logs -text "LOG: No employeeType to add"
		}
		add-logs -text "LOG: Done with employeeType"
		
		add-logs -text "LOG: Getting user employeeNumber attribute to set"
		If ($textboxemployeenumber.text -ne "")
		{
			add-logs -text "LOG: Adding employeeNumber: $($textboxemployeenumber.text) to user"
			Set-ADUser $User -EmployeeNumber $textboxemployeenumber.text
		}
		Else
		{
			add-logs -text "LOG: No employeeNumber to add"
		}
		add-logs -text "LOG: Done with employeeNumber"
		
		add-logs -text "LOG: Getting user employeeID attribute to set"
		If ($textboxEmployeeID.Text -ne "")
		{
			add-logs -text "LOG: Adding employeeID: $($textboxEmployeeID.text) to user"
			Set-ADUser $User -EmployeeID $textboxEmployeeID.text
		}
		Else
		{
			add-logs -text "LOG: No employeeID to add"
		}
		add-logs -text "LOG: Done with employeeID"
		
		#Find if user should be added to any groups
		add-logs -text 'LOG: Getting checked groups'
		$groups = $checkedlistboxGroups.CheckedItems
		If ($groups -ne $null)
		{
			add-logs -text 'LOG: Groups found'
			foreach ($group in $groups)
			{
				add-logs -text "LOG: Adding $User to $Group"
				add-logs -text "CMD: Add-ADGroupMember -Identity $Group -Members $User"
				Add-ADGroupMember -Identity $Group -Members $User
			}
		}
		Else
		{
			add-logs -text 'LOG: No Groups checked'
		}
		Add-Logs -text "LOG: Done"
		
		Add-Logs -text "LOG: Checking if primary group is set other than the default of Domain Users"
		If ($comboboxPrimaryGroup.Text -eq "Domain Users")
		{
			Add-Logs -text "LOG: Primary Group set to Domain Users"
		}
		Else
		{
			$PrimaryGroup = $comboboxPrimaryGroup.Text
			Add-Logs -text "LOG: Setting Primary Group to $PrimaryGroup"
			Add-Logs -text "CMD: `$Group = Get-ADGroup $PrimaryGroup -properties @('primaryGroupToken')"
			$Group = Get-ADGroup $PrimaryGroup -properties @("primaryGroupToken")
			Add-Logs -text "CMD: Set-ADUser -identity `$User -Replace @{ primarygroupid = `$group.primaryGroupToken }"
			Set-ADUser -identity $User.SamAccountName -Replace @{ primarygroupid = $group.primaryGroupToken }
		}
		Add-Logs -text "LOG: Done"
		
		add-logs -text 'LOG: Checking if user is being put in an specific OU'
		If ($comboboxOUTree.Text -ne $null)
		{
			
			add-logs -text 'LOG: Specific OU specified, moving user'
			$CanocicalName = $comboboxOUTree.Text
			add-logs -text "CMD: `$OUTOMove = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Where-Object { `$_.CanonicalName -eq $CanocicalName }).DistinguishedName"
			$OUTOMove = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Where-Object { $_.CanonicalName -eq $CanocicalName }).DistinguishedName
			add-logs -text "CMD: `$User | Move-ADObject -TargetPath $OUTOMove"
			$User | Move-ADObject -TargetPath $OUTOMove
			add-logs -text 'LOG: Done'
		}
		Else
		{
			add-logs -text 'LOG: No OU Specified, skipping'
		}
	}
}

function New-MUCO365User
{
	add-logs -text 'LOG: Checking DirSync option'
	#If DirSync is enabled
	If ($checkboxRunADSync.CheckState -eq 'Checked')
	{
		If (((($textboxADSyncServer.Text | Measure-Object -Character).Characters) -gt 0))
		{
			$SyncServer = $textboxADSyncServer.text
			add-logs -text 'LOG: DirSync Enabled'
			add-logs -text "LOG: Running DirSync on $SyncServer"
			add-logs -text "CMD: Invoke-Command -ComputerName $SyncServer -ScriptBlock { Start-ADSyncSyncCycle }"
			Try
			{
				Invoke-Command -ComputerName $textboxADSyncServer.text -ScriptBlock { Start-ADSyncSyncCycle } -ErrorAction Stop
			}
			Catch
			{
				add-logs -text "WARN: $_"
				Add-Type -AssemblyName System.Windows.Forms
				[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
			}
			add-logs -text 'LOG: Done'
		}
		Else
		{
			add-logs -text "WARN: ADSync Server text box is empty"
			Add-Type -AssemblyName System.Windows.Forms
			[System.Windows.Forms.MessageBox]::Show("Please enter an AD Sync server", 'Warning', 'OK', 'Warning')
		}
	}
	#If DirSync is not enabled
	Else
	{
		add-logs -text "LOG: User is not being AD-Synced"
		
		add-logs -text 'LOG: All required parameters are valid'
		
		#Check to see if the user is being enabled upon creation or disabled
		
		#User is going to be disabled
		add-logs -text 'LOG: Checking enabled status of user'
		If ($checkboxBlockCred.Checked -eq $true)
		{
			#If user is going to be disabled
			add-logs -text 'LOG: User is Disabled'
			add-logs -text 'LOG: Creating user'
			If (($Licenses2Add) -and ($comboboxO365countrycode.SelectedItem -eq $null))
			{
				add-logs -text 'WARN: You must assign a country code to your user if you are assigning a license'
				$InfoMessage = 'You must assign a country code to your user if you are assigning a license'
				$InfoTitle = "Warning"
				Show-MessageBox_psf
			}
			Else
			{
				If ($Licenses2Add -ne $null)
				{
					License-MUCO365User
				}
				Try
				{
					add-logs -text 'LOG: Creating User'
					$User = New-MsolUser -FirstName $textboxO365FirstName.Text -LastName $textboxO365LastName.Text -DisplayName $textboxO365DisplayName.Text -Password $textboxo365confirmpassword.text -UserPrincipalName (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)) -UsageLocation $comboboxO365countrycode.SelectedItem -ForceChangePassword ($checkboxo365usermustchangepassword.Checked) -PasswordNeverExpires ($checkboxPasswordNeverExpires.checked) -BlockCredential $true -StreetAddress $textboxO365street.Text -City $textboxo365city.Text -State $textboxo365state.Text -PostalCode $textboxo365zip.Text
					add-logs -text 'LOG: Done'
					
					Add-Logs -text 'LOG: Adding Licenses'
					$licenseforuser = Get-Content -Path "$env:TEMP\MUClicenseforuser.txt"
					$licenseforuser | ForEach-Object {
						Add-Logs -text "LOG: Adding $_"
						
						Set-MsolUserLicense -UserPrincipalName $User.UserPrincipalName -AddLicenses $_ -ErrorAction SilentlyContinue
					}
					Add-Logs -text 'LOG: Done'
					
				}
				Catch
				{
					add-logs -text "WARN: $_"
					$InfoMessage = $_
					$InfoTitle = "Warning"
					Show-MessageBox_psf
				}
				
				#Find if user should be added to any Security groups
				add-logs -text 'LOG: Getting checked Security groups'
				$groups = $checkedlistboxO365SecurityGroups.CheckedItems
				If ($groups -ne $null)
				{
					add-logs -text 'LOG: Security Groups found'
					$DN = ($User).DisplayName
					foreach ($group in $groups)
					{
						add-logs -text "LOG: Adding $DN to $Group"
						$GroupGuid = ((get-msolgroup -All | where-object { $_.displayname -eq $Group }).ObjectID).GUID
						$UserGUID = (($User).ObjectID).GUID
						add-logs -text "CMD: Add-MsolGroupMember -Identity $GroupGuid -Members $UserGUID"
						Add-MsolGroupMember -GroupObjectId $GroupGuid -GroupMemberObjectId $UserGUID
					}
				}
				Else
				{
					add-logs -text 'LOG: No Security Groups checked'
				}
				Add-Logs -text 'LOG: Done with Security Groups'
				
				#Check user licenses, if licensed create and wait for mailbox
				Add-Logs -text 'LOG: Checking if license was applied to the user'
				If ($Licenses2Add -ne $Null)
				{
					Add-Logs -text 'LOG: License is applied to the new user'
					
					$ts = New-TimeSpan -Minutes 8
					
					$TermLoop = ((get-date) + $ts).ToString("HH:mm")
					Do
					{
						$DateNow = (Get-date).ToString("HH:mm")
						Add-Logs -text 'LOG: Pausing for 30 seconds for mailbox to be created'
						Start-Sleep -Seconds 10
						Add-Logs -text 'LOG: 20 seconds remaining'
						Start-Sleep -Seconds 10
						Add-Logs -text 'LOG: 10 seconds remaining'
						Start-Sleep -Seconds 10
						Add-Logs -text 'LOG: Done'
						
						Add-Logs -text 'LOG: Checking to see if the mailbox has been created, if mailbox is not present will wait another 30 seconds'
						Add-Logs -text 'LOG: Loop will exit 8 minutes after it began regardless of mailbox creation'
					}
					Until (((Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }) -ne $null) -or ($DateNow -eq $TermLoop))
					
					add-logs -text 'LOG: Checking E-Mail address field for entered data'
					If ($textboxO365EmailAddress.Text -like "*@*")
					{
						add-logs -text 'LOG: Verifying that E-Mail value is not the same as UPN'
						If ($textboxO365EmailAddress.Text -ne (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)))
						{
							add-logs -text 'LOG: Email is different from UPN, proceeding.'
							
							Try
							{
								$PrimEmail = $textboxO365EmailAddress.Text
								add-logs -text "LOG: Setting primary E-Mail to $PrimEmail"
								$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								$DN = $Mailbox.DisplayName
								add-logs -text "CMD: Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail"
								Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail
								add-logs -text "LOG: Done"
							}
							Catch
							{
								add-logs -text "WARN: $_"
								Add-Type -AssemblyName System.Windows.Forms
								[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
							}
						}
						Else
						{
							add-logs -text "LOG: E-Mail entered is the same as UPN, skipping."
						}
						
					}
					Else
					{
						add-logs -text "LOG: No E-Mail entered"
					}
					
					#Add any email aliases
					add-logs -text 'LOG: Checking Alias Addresses field for entered data'
					If ($textboxo365proxyaddresses.Text -ne $null)
					{
						add-logs -text 'LOG: Found Alias Addresses to add'
						$Proxys = $textboxo365proxyaddresses.Lines
						$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
						$DN = $Mailbox.DisplayName
						foreach ($Proxy in $Proxys)
						{
							add-logs -text "LOG: Adding $Proxy for $DN"
							Set-Mailbox $Mailbox.DisplayName -EmailAddresses @{ add = "$Proxy" }
							add-logs -text 'LOG: Done'
						}
					}
					Else
					{
						add-logs -text 'LOG: No Alias Addresses found'
					}
					add-logs -text 'LOG: Done with Alias Addresses'
					
					#Find if user should be added to any mail groups
					add-logs -text 'LOG: Getting checked mail groups'
					$groups = $checkedlistboxDISTROo365groups.CheckedItems
					If ($groups -ne $null)
					{
						add-logs -text 'LOG: Mail Groups found'
						$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
						$DN = ($User).DisplayName
						foreach ($group in $groups)
						{
							Add-Logs -text "LOG: Checking to see if $group is a Office 365 Group"
							If ((Get-UnifiedGroup).displayName -contains $group)
							{
								Add-Logs -text "LOG: $group is an Office 365 group"
								Add-Logs -text "LOG: Adding $DN to $Group"
								Add-Logs -text "CMD: Add-UnifiedGroupLinks -Identity $group -LinkType Members -Links $DN"
								Add-UnifiedGroupLinks -Identity $group -LinkType Members -Links $DN
								Add-Logs -text "LOG: Done"
							}
							Else
							{
								Add-Logs -text "LOG: $group is not an Office 365 group"
								
								add-logs -text "LOG: Adding $DN to $Group"
								add-logs -text "CMD: Add-DistributionGroupMember -Identity $Group -Member $DN"
								Try
								{
									Add-DistributionGroupMember -Identity "$Group" -Member ($User).DisplayName
								}
								Catch
								{
									add-logs -text "WARN: $_"
									Add-Type -AssemblyName System.Windows.Forms
									[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
								}
							}
						}
					}
					Else
					{
						add-logs -text 'LOG: No Mail Groups checked'
					}
					Add-Logs -text 'LOG: Done with Mail Groups'
					
					#Shared Mailboxes
					Add-Logs -text 'LOG: Checking if there are Share Mailboxes checked'
					$SharedMailboxes = $checkedlistboxsharedmailboxes.CheckedItems
					#If there are shared mailboxes to add the user to (full access rights)
					If ($SharedMailboxes -ne $null)
					{
						$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
						$DN = ($User).DisplayName
						If ($comboboxsharedmaiboxpermission.SelectedItem -eq "Full Access")
						{
							foreach ($SharedMailbox in $SharedMailboxes)
							{
								$Automap = $comboboxsharedmailboxautomap.Text
								Add-Logs -text "LOG: Adding $DN Full Access to $SharedMailbox with Automapping set to $Automap"
								If ($Automap -eq "False")
								{
									Add-Logs -text "LOG: AutoMapping set to False"
									Add-Logs -text "CMD: Add-MailboxPermission $SharedMailbox -User $DN -AccessRights FullAccess -AutoMapping:`$false"
									Add-MailboxPermission $SharedMailbox -User ($User).DisplayName -AccessRights FullAccess -AutoMapping:$false
								}
								Else
								{
									Add-Logs -text "LOG: AutoMapping set to True"
									Add-Logs -text "CMD: Add-MailboxPermission $SharedMailbox -User $DN -AccessRights FullAccess"
									Add-MailboxPermission $SharedMailbox -User ($User).DisplayName -AccessRights FullAccess
								}
							}
						}
						ElseIf ($comboboxsharedmaiboxpermission.SelectedItem -eq "Send As")
						{
							foreach ($SharedMailbox in $SharedMailboxes)
							{
								Add-Logs -text "LOG: Assigning $DN Send-As permission on $SharedMailbox"
								Add-Logs -text 'CMD: Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs'
								Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs -Confirm:$False
								Add-Logs -text "LOG: Done"
							}
							
						}
						Else
						{
							foreach ($SharedMailbox in $SharedMailboxes)
							{
								#$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								Add-Logs -text "LOG: Granting $DN to Send on Behalf of $SharedMailbox"
								Add-Logs -text "CMD: Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo $DN"
								Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo ($User).DisplayName
								Add-Logs -text 'LOG: Done'
							}
						}
					}
					Else
					{
						Add-Logs -text 'LOG: No Shared Mailboxes selected'
					}
					Add-Logs -text 'LOG: Done with Shared Mailboxes'
					
					Add-Logs -text 'LOG: Checking if Hide from global address list is set to True'
					#Hide from GAL
					If ($comboboxO365HidefromGAL.SelectedItem -eq $True)
					{
						Add-Logs -text 'LOG: Hide from global address list is set to True'
						Add-Logs -text 'LOG: Hiding mailbox from global address list'
						$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
						If ($null -ne $mailbox)
						{
							Set-Mailbox -Identity ($Mailbox).DisplayName -HiddenFromAddressListsEnabled $true
						}
						Else
						{
							Add-Logs -text 'WARN: User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox'
							$InfoMessage = "User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox"
							$InfoTitle = "Warning"
							Show-MessageBox_psf
						}
					}
					Else
					{
						Add-Logs -text 'LOG: Hide from global address list is set to False'
					}
				}
				Else
				{
					Add-Logs -text 'LOG: No license is being added for the new user'
					Add-Logs -text 'LOG: Skipping Mail Groups as user is not licensed'
					Add-Logs -text 'LOG: Skipping Shared Mailboxes as user is not licensed'
					Add-Logs -text 'LOG: Skipping Hide from Global Address List as user is not licensed'
				}
				
				#If MFA is set to TRUE then enable MFA for the user
				Add-Logs -text 'LOG: Checking MFA status for the user'
				If ($comboboxMFA.Selecteditem -eq "True")
				{
					$UserMFA = ($User).UserPrincipalName
					Add-Logs -text 'LOG: MFA for the user set to TRUE, enabling MFA'
					Add-Logs -text "CMD: `$Auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement"
					$Auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement
					Add-Logs -text 'CMD: $Auth.RelyingParty = "*"'
					$Auth.RelyingParty = "*"
					Add-Logs -text 'CMD: $MFA = @($Auth)'
					$MFA = @($Auth)
					Add-Logs -text "CMD: Set-MsolUser -UserPrincipalName $UserMFA -StrongAuthenticationRequirements $MFA"
					Set-MsolUser -UserPrincipalName $UserMFA -StrongAuthenticationRequirements $MFA
					Add-Logs -text 'LOG: Done'
				}
				Else
				{
					Add-Logs -text 'LOG: MFA is set to False'
				}
				Add-Logs -text 'LOG: Done'
				
				Add-Logs -text 'LOG: Checking OWA'
				If ($comboboxOWA.SelectedItem -eq 'False')
				{
					Add-Logs -text 'LOG: OWA Disabled'
					Add-Logs -text 'CMD: Set-CASMailbox (($User).ObjectID).GUID -OWAEnabled $false'
					Set-CASMailbox (($User).ObjectID).GUID -OWAEnabled $false
				}
				Else
				{
					Add-Logs -text 'LOG: OWA Enabled'
					
				}
				
				Add-Logs -text 'LOG: Checking ActiveSync'
				If ($comboboxActiveSync.SelectedItem -eq 'False')
				{
					Add-Logs -text 'LOG: ActiveSync Disabled'
					Add-Logs -text 'CMD: Set-CASMailbox (($User).ObjectID).GUID -ActiveSync $false'
					Set-CASMailbox (($User).ObjectID).GUID -ActiveSync $false
				}
				Else
				{
					Add-Logs -text 'LOG: ActiveSync Enabled'
					
				}
				
				Add-Logs -text 'LOG: Done'
				
			}
		}
		Else
		{
			#User is going to be enabled upon creation
			add-logs -text 'LOG: User is Enabled'
			add-logs -text 'LOG: Creating user'
			If (($Licenses2Add) -and ($comboboxO365countrycode.SelectedItem -eq $null))
			{
				add-logs -text 'WARN: You must assign a country code to your user if you are assigning a license'
				$InfoMessage = 'You must assign a country code to your user if you are assigning a license'
				$InfoTitle = "Warning"
				Show-MessageBox_psf
			}
			Else
			{
				If ($Licenses2Add -ne $null)
				{
					License-MUCO365User
				}
				Try
				{
					add-logs -text 'LOG: Creating User'
					$User = New-MsolUser -FirstName $textboxO365FirstName.Text -LastName $textboxO365LastName.Text -DisplayName $textboxO365DisplayName.Text -Password $textboxo365confirmpassword.text -UserPrincipalName (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)) -UsageLocation $comboboxO365countrycode.SelectedItem -ForceChangePassword ($checkboxo365usermustchangepassword.Checked) -PasswordNeverExpires ($checkboxPasswordNeverExpires.checked) -BlockCredential $false -StreetAddress $textboxO365street.text -City $textboxo365city.Text -State $textboxo365state.Text -PostalCode $textboxo365zip.Text
					add-logs -text 'LOG: Done'
					
					Add-Logs -text 'LOG: Adding Licenses'
					$licenseforuser = Get-Content -Path "$env:TEMP\MUClicenseforuser.txt"
					$licenseforuser | ForEach-Object {
						Add-Logs -text "LOG: Adding $_"
						
						Set-MsolUserLicense -UserPrincipalName $User.UserPrincipalName -AddLicenses $_ -ErrorAction SilentlyContinue
					}
					Add-Logs -text 'LOG: Done'
				}
				Catch
				{
					add-logs -text "WARN: $_"
					$InfoMessage = $_
					$InfoTitle = "Warning"
					Show-MessageBox_psf
				}
				#Find if user should be added to any Security groups
				add-logs -text 'LOG: Getting checked Security groups'
				$groups = $checkedlistboxO365SecurityGroups.CheckedItems
				If ($groups -ne $null)
				{
					add-logs -text 'LOG: Security Groups found'
					$DN = ($User).DisplayName
					foreach ($group in $groups)
					{
						add-logs -text "LOG: Adding $DN to $Group"
						$GroupGuid = ((get-msolgroup -All | where-object { $_.displayname -eq $Group }).ObjectID).GUID
						$UserGUID = (($User).ObjectID).GUID
						add-logs -text "CMD: Add-MsolGroupMember -Identity $GroupGuid -Members $UserGUID"
						Add-MsolGroupMember -GroupObjectId $GroupGuid -GroupMemberObjectId $UserGUID
					}
				}
				Else
				{
					add-logs -text 'LOG: No Security Groups checked'
				}
				Add-Logs -text 'LOG: Done with Security Groups'
				
				#Check user licenses, if licensed create and wait for mailbox
				Add-Logs -text 'LOG: Checking if license was applied to the user'
				If ($Licenses2Add -ne $Null)
				{
					Add-Logs -text 'LOG: License is applied to the new user'
					
					$ts = New-TimeSpan -Minutes 8
					
					$TermLoop = ((get-date) + $ts).ToString("HH:mm")
					Do
					{
						$DateNow = (Get-date).ToString("HH:mm")
						Add-Logs -text 'LOG: Pausing for 30 seconds for mailbox to be created'
						Start-Sleep -Seconds 10
						Add-Logs -text 'LOG: 20 seconds remaining'
						Start-Sleep -Seconds 10
						Add-Logs -text 'LOG: 10 seconds remaining'
						Start-Sleep -Seconds 10
						Add-Logs -text 'LOG: Done'
						
						Add-Logs -text 'LOG: Checking to see if the mailbox has been created, if mailbox is not present will wait another 30 seconds'
						Add-Logs -text 'LOG: Loop will exit 8 minutes after it began regardless of mailbox creation'
					}
					Until (((Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }) -ne $null) -or ($DateNow -eq $TermLoop))
					
					add-logs -text 'LOG: Checking E-Mail address field for entered data'
					If ($textboxO365EmailAddress.Text -like "*@*")
					{
						add-logs -text 'LOG: Verifying that E-Mail value is not the same as UPN'
						If ($textboxO365EmailAddress.Text -ne (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)))
						{
							add-logs -text 'LOG: Email is different from UPN, proceeding.'
							
							Try
							{
								$PrimEmail = $textboxO365EmailAddress.Text
								add-logs -text "LOG: Setting primary E-Mail to $PrimEmail"
								$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								$DN = $Mailbox.DisplayName
								add-logs -text "CMD: Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail"
								Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail
								add-logs -text "LOG: Done"
							}
							Catch
							{
								add-logs -text "WARN: $_"
								Add-Type -AssemblyName System.Windows.Forms
								[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
							}
						}
						Else
						{
							add-logs -text "LOG: E-Mail entered is the same as UPN, skipping."
						}
						
					}
					Else
					{
						add-logs -text "LOG: No E-Mail entered"
					}
					
					#Add any email aliases
					add-logs -text 'LOG: Checking Alias Addresses field for entered data'
					If ($textboxo365proxyaddresses.Text -ne $null)
					{
						add-logs -text 'LOG: Found Alias Addresses to add'
						$Proxys = $textboxo365proxyaddresses.Lines
						$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
						$DN = $Mailbox.DisplayName
						foreach ($Proxy in $Proxys)
						{
							add-logs -text "LOG: Adding $Proxy for $DN"
							Set-Mailbox $Mailbox.DisplayName -EmailAddresses @{ add = "$Proxy" }
							add-logs -text 'LOG: Done'
						}
					}
					Else
					{
						add-logs -text 'LOG: No Alias Addresses found'
					}
					add-logs -text 'LOG: Done with Alias Addresses'
					
					#Find if user should be added to any mail groups
					add-logs -text 'LOG: Getting checked mail groups'
					$groups = $checkedlistboxDISTROo365groups.CheckedItems
					If ($groups -ne $null)
					{
						add-logs -text 'LOG: Mail Groups found'
						$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
						$DN = ($User).DisplayName
						foreach ($group in $groups)
						{
							Add-Logs -text "LOG: Checking to see if $group is a Office 365 Group"
							If ((Get-UnifiedGroup).displayName -contains $group)
							{
								Add-Logs -text "LOG: $group is an Office 365 group"
								Add-Logs -text "LOG: Adding $DN to $Group"
								Add-Logs -text "CMD: Add-UnifiedGroupLinks -Identity $group -LinkType Members -Links $DN"
								Add-UnifiedGroupLinks -Identity $group -LinkType Members -Links $DN
								Add-Logs -text "LOG: Done"
							}
							Else
							{
								Add-Logs -text "LOG: $group is not an Office 365 group"
								
								add-logs -text "LOG: Adding $DN to $Group"
								add-logs -text "CMD: Add-DistributionGroupMember -Identity $Group -Member $DN"
								Try
								{
									Add-DistributionGroupMember -Identity "$Group" -Member ($User).DisplayName
								}
								Catch
								{
									add-logs -text "WARN: $_"
									Add-Type -AssemblyName System.Windows.Forms
									[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
								}
							}
						}
					}
					Else
					{
						add-logs -text 'LOG: No Mail Groups checked'
					}
					Add-Logs -text 'LOG: Done with Mail Groups'
					
					#Shared Mailboxes
					Add-Logs -text 'LOG: Checking if there are Share Mailboxes checked'
					$SharedMailboxes = $checkedlistboxsharedmailboxes.CheckedItems
					#If there are shared mailboxes to add the user to (full access rights)
					If ($SharedMailboxes -ne $null)
					{
						$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
						$DN = ($User).DisplayName
						If ($comboboxsharedmaiboxpermission.SelectedItem -eq "Full Access")
						{
							foreach ($SharedMailbox in $SharedMailboxes)
							{
								$Automap = $comboboxsharedmailboxautomap.Text
								Add-Logs -text "LOG: Adding $DN Full Access to $SharedMailbox with Automapping set to $Automap"
								If ($Automap -eq "False")
								{
									Add-Logs -text "LOG: AutoMapping set to False"
									Add-Logs -text "CMD: Add-MailboxPermission $SharedMailbox -User $DN -AccessRights FullAccess -AutoMapping:`$false"
									Add-MailboxPermission $SharedMailbox -User ($User).DisplayName -AccessRights FullAccess -AutoMapping:$false
								}
								Else
								{
									Add-Logs -text "LOG: AutoMapping set to True"
									Add-Logs -text "CMD: Add-MailboxPermission $SharedMailbox -User $DN -AccessRights FullAccess"
									Add-MailboxPermission $SharedMailbox -User ($User).DisplayName -AccessRights FullAccess
								}
							}
						}
						ElseIf ($comboboxsharedmaiboxpermission.SelectedItem -eq "Send As")
						{
							foreach ($SharedMailbox in $SharedMailboxes)
							{
								Add-Logs -text "LOG: Assigning $DN Send-As permission on $SharedMailbox"
								Add-Logs -text 'CMD: Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs'
								Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs -Confirm:$False
								Add-Logs -text "LOG: Done"
							}
							
						}
						Else
						{
							foreach ($SharedMailbox in $SharedMailboxes)
							{
								#$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								Add-Logs -text "LOG: Granting $DN to Send on Behalf of $SharedMailbox"
								Add-Logs -text "CMD: Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo $DN"
								Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo ($User).DisplayName
								Add-Logs -text 'LOG: Done'
							}
						}
					}
					Else
					{
						Add-Logs -text 'LOG: No Shared Mailboxes selected'
					}
					Add-Logs -text 'LOG: Done with Shared Mailboxes'
					
					Add-Logs -text 'LOG: Checking if Hide from global address list is set to True'
					#Hide from GAL
					If ($comboboxO365HidefromGAL.SelectedItem -eq $True)
					{
						Add-Logs -text 'LOG: Hide from global address list is set to True'
						Add-Logs -text 'LOG: Hiding mailbox from global address list'
						$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
						If ($null -ne $mailbox)
						{
							Set-Mailbox -Identity ($Mailbox).DisplayName -HiddenFromAddressListsEnabled $true
						}
						Else
						{
							Add-Logs -text 'WARN: User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox'
							$InfoMessage = "User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox"
							$InfoTitle = "Warning"
							Show-MessageBox_psf
						}
					}
					Else
					{
						Add-Logs -text 'LOG: Hide from global address list is set to False'
					}
				}
				Else
				{
					Add-Logs -text 'LOG: No license is being added for the new user'
					Add-Logs -text 'LOG: Skipping Mail Groups as user is not licensed'
					Add-Logs -text 'LOG: Skipping Shared Mailboxes as user is not licensed'
					Add-Logs -text 'LOG: Skipping Hide from Global Address List as user is not licensed'
				}
				
				#If MFA is set to TRUE then enable MFA for the user
				Add-Logs -text 'LOG: Checking MFA status for the user'
				If ($comboboxMFA.Selecteditem -eq "True")
				{
					$UserMFA = ($User).UserPrincipalName
					Add-Logs -text 'LOG: MFA for the user set to TRUE, enabling MFA'
					Add-Logs -text "CMD: `$Auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement"
					$Auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement
					Add-Logs -text 'CMD: $Auth.RelyingParty = "*"'
					$Auth.RelyingParty = "*"
					Add-Logs -text 'CMD: $MFA = @($Auth)'
					$MFA = @($Auth)
					Add-Logs -text "CMD: Set-MsolUser -UserPrincipalName $UserMFA -StrongAuthenticationRequirements $MFA"
					Set-MsolUser -UserPrincipalName $UserMFA -StrongAuthenticationRequirements $MFA
					Add-Logs -text 'LOG: Done'
				}
				Else
				{
					Add-Logs -text 'LOG: MFA is set to False'
				}
				Add-Logs -text 'LOG: Done'
				
				Add-Logs -text 'LOG: Checking OWA'
				If ($comboboxOWA.SelectedItem -eq 'False')
				{
					Add-Logs -text 'LOG: OWA Disabled'
					Add-Logs -text 'CMD: Set-CASMailbox (($User).ObjectID).GUID -OWAEnabled $false'
					Set-CASMailbox (($User).ObjectID).GUID -OWAEnabled $false
				}
				Else
				{
					Add-Logs -text 'LOG: OWA Enabled'
					
				}
				
				Add-Logs -text 'LOG: Checking ActiveSync'
				If ($comboboxActiveSync.SelectedItem -eq 'False')
				{
					Add-Logs -text 'LOG: ActiveSync Disabled'
					Add-Logs -text 'CMD: Set-CASMailbox (($User).ObjectID).GUID -ActiveSync $false'
					Set-CASMailbox (($User).ObjectID).GUID -ActiveSync $false
				}
				Else
				{
					Add-Logs -text 'LOG: ActiveSync Enabled'
					
				}
				
				Add-Logs -text 'LOG: Done'
			}
		}
	}
}

function Update-O365DisplayNameTextBox
{
	$copyuser = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CopyUser -ErrorAction SilentlyContinue).CopyUser
	If ($copyuser -ne 1)
	{
		$config = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name UserFormatO365DisplayName -ErrorAction SilentlyContinue).UserFormatO365DisplayName
		#Create an array that we will use for formatting
		$O365DisplayNameFormatString = @()
		If (($null -eq $config) -or ($config -eq ""))
		{
			$config = "%Firstname% %LastName%"
			Get-Item 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' -Force | Set-ItemProperty -Name UserFormatO365DisplayName -Value "%FirstName% %LastName%" -Force | Out-Null
		}
		$config -split "%" | ForEach-Object {
			If ($_ -eq "FirstName")
			{
				$O365DisplayNameFormatString += $textboxO365FirstName.Text
			}
			ElseIf ($_ -eq "LastName")
			{
				$O365DisplayNameFormatString += $textboxO365LastName.Text
			}
			ElseIf ($_ -like " ")
			{
				$space = " "
				$O365DisplayNameFormatString += $space
			}
			ElseIf (($_ -eq "UPN") -or ($_ -eq "UserPrincipalName"))
			{
				$O365DisplayNameFormatString += $textboxUserLogonName.text
			}
			ElseIf (($_ -eq "Email") -or ($_ -eq "E-Mail"))
			{
				$O365DisplayNameFormatString += $textboxO365EmailAddress.text
			}
			ElseIf ($_ -eq "FirstLetterFirstName")
			{
				$O365DisplayNameFormatString += $textboxO365FirstName.Text.Substring(0, 1)
			}
			ElseIf ($_ -eq "FirstLetterLastName")
			{
				$O365DisplayNameFormatString += $textboxO365LastName.Text.Substring(0, 1)
			}
			ElseIf ($_ -eq "UserPrincipalNameDomain")
			{
				$O365EmailFormatString += $comboboxO365Domains.SelectedItem
			}
			ElseIf ($_ -eq "UPNDomain")
			{
				$O365EmailFormatString += $comboboxO365Domains.SelectedItem
			}
			Else
			{
				$O365DisplayNameFormatString += $_
			}
			$textboxO365DisplayName.Text = [String]::Join('', $O365DisplayNameFormatString)
		}
		
	}
}

function Update-O365EmailTextbox
{
	$copyuser = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CopyUser -ErrorAction SilentlyContinue).CopyUser
	If ($copyuser -ne 1)
	{
		
		$config = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name UserFormatO365Email -ErrorAction SilentlyContinue).UserFormatO365Email
		If (($null -eq $config) -or ($config -eq ""))
		{
			$config = "%FirstLetterFirstName%%LastName%%UserPrincipalNameDomain%"
			Get-Item 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' -Force | Set-ItemProperty -Name UserFormatO365Email -Value $config -Force | Out-Null
		}
		#Create an array that we will use for formatting
		$O365EmailFormatString = @()
		$config -split "%" | ForEach-Object {
			If ($_ -eq "FirstName")
			{
				$O365EmailFormatString += $textboxO365FirstName.Text
			}
			ElseIf ($_ -eq "LastName")
			{
				$O365EmailFormatString += $textboxO365LastName.Text
			}
			ElseIf ($_ -like " ")
			{
				$space = " "
				$O365EmailFormatString += $space
			}
			ElseIf (($_ -eq "UPN") -or ($_ -eq "UserPrincipalName"))
			{
				$O365EmailFormatString += $textboxUserLogonName.text
			}
			ElseIf ($_ -eq "FirstLetterFirstName")
			{
				$O365EmailFormatString += $textboxO365FirstName.Text.Substring(0, 1)
			}
			ElseIf ($_ -eq "FirstLetterLastName")
			{
				$O365EmailFormatString += $textboxO365LastName.Text.Substring(0, 1)
			}
			ElseIf ($_ -eq "UserPrincipalNameDomain")
			{
				$O365EmailFormatString += $comboboxO365Domains.SelectedItem
			}
			ElseIf ($_ -eq "UPNDomain")
			{
				$O365EmailFormatString += $comboboxO365Domains.SelectedItem
			}
			Else
			{
				$O365EmailFormatString += $_
			}
			$textboxO365EmailAddress.Text = [String]::Join('', $O365EmailFormatString)
		}
		
	}
}

function Update-O365UserPrincipalNameTextbox
{
	$copyuser = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CopyUser -ErrorAction SilentlyContinue).CopyUser
	If ($copyuser -ne 1)
	{
		
		$config = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name UserFormatO365UserPrincipalName -ErrorAction SilentlyContinue).UserFormatO365UserPrincipalName
		#Create an array that we will use for formatting
		$O365UserPrincipalNameFormatString = @()
		$config -split "%" | ForEach-Object {
			If ($_ -eq "FirstName")
			{
				$O365UserPrincipalNameFormatString += $textboxO365FirstName.Text
			}
			ElseIf ($_ -eq "LastName")
			{
				$O365UserPrincipalNameFormatString += $textboxO365LastName.Text
			}
			ElseIf ($_ -like " ")
			{
				$space = " "
				$O365UserPrincipalNameFormatString += $space
			}
			ElseIf ($_ -eq "FirstLetterFirstName")
			{
				$O365UserPrincipalNameFormatString += $textboxO365FirstName.Text.Substring(0, 1)
			}
			ElseIf ($_ -eq "FirstLetterLastName")
			{
				$O365UserPrincipalNameFormatString += $textboxO365LastName.Text.Substring(0, 1)
			}
			ElseIf (($_ -eq "Email") -or ($_ -eq "E-Mail"))
			{
				$O365UserPrincipalNameFormatString += $textboxO365EmailAddress.text
			}
			Else
			{
				$O365UserPrincipalNameFormatString += $_
			}
			$textboxO365UPN.Text = [String]::Join('', $O365UserPrincipalNameFormatString)
		}
		
	}
}

#endregion

$MainForm_Load = {
	

	
	$MFALogin = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name MFALogin -ErrorAction SilentlyContinue).MFALogin
	If ($MFALogin -eq 1)
	{
		$radiobuttonMFALogin.Checked = $true
	}
	Else
	{
		$radiobuttonNonMFALogin.Checked = $true
	}
	

	
	
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	If ($DarkMode -eq 1)
	{
		Set-DarkMode
		
	}
	Else
	{
		#Set-LightMode
		
	}
	
	
}

$MainForm_DuringShow = {
	
	Import-Module ActiveDirectory -ErrorAction SilentlyContinue
	Import-Module ADSync -ErrorAction SilentlyContinue
	
	#DEBUG
	#$tabcontrolUserProperties.Enabled = $true
	#$groupboxNoAdSync.Enabled = $true
	
	$copyActiveDirectoryUserToolStripMenuItem.Enabled = $false
	$copyOffice365UserToolStripMenuItem.Enabled = $false
	
	$textboxADSyncServer.Enabled = $false
	
	$datetimepickerDATE.Refresh()
	
	$radiobuttonNever.Checked = $true
	$datetimepickerDATE.Enabled = $false
	$datetimepickerTIME.Enabled = $false
	
	$datetimepickerTIME.Text = "05:00 PM"
	
	$MainForm.MaximizeBox = $false
	
	$maskedtextboxpassword.UseSystemPasswordChar = $true
	$textboxConfirmPassword.UseSystemPasswordChar = $true
	$textboxo365confirmpassword.UseSystemPasswordChar = $true
	$maskedtextboxo365password.UseSystemPasswordChar = $true
	
	$comboboxO365HidefromGAL.SelectedIndex = 1
	#DEBUG
	$groupboxNoAdSync.Enabled = $false
	$groupboxADSync.Enabled = $false

	#Disable the Office 365 license drop down until we connect to MSOnline
	#$comboboxO365Licenses.Enabled = $False
	$comboboxO365Licenses.Text = "Please connect to Office 365 to assign a license"
	
	#DEBUG
	$tabcontrolUserProperties.Enabled = $false
	
	
	$buttonCreateUser.Enabled = $false
	
	$labelO365Groups.Text = "To add your user to a Mail Enabled Group, please connect to Office 365"
	$labelsharedmailboxes.text = "To grant your user permissions on a Shared Mailbox, please connect to Office 365"
	$labelSecurityGroups.Text = "To add your user to a Security Group, please connect to Office 365"
	
	
	$checkedlistboxDISTROo365groups.Enabled = $false
	$checkedlistboxsharedmailboxes.Enabled = $false
	
	$disconnectFromOffice365ToolStripMenuItem.Enabled = $false
	
	Update-ComboBox -ComboBox $comboboxO365Domains -Items "Please connect to Office 365"
	
	$comboboxsharedmaiboxpermission.SelectedIndex = 0
	$comboboxsharedmailboxautomap.SelectedIndex = 0
	
	$comboboxsharedmaiboxpermission.Enabled = $false
	$comboboxsharedmailboxautomap.Enabled = $false
	
	$Global:AD_Pre_Req = 0
	$Global:O365_Pre_Req = 0
	
	$comboboxMFA.SelectedIndex = 0
	
	$CountryCode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CountryCode -ErrorAction SilentlyContinue).CountryCode
	If ($null -eq $CountryCode)
	{
		$comboboxO365countrycode.SelectedItem = "US"
	}
	Else
	{
		$comboboxO365countrycode.SelectedItem = $CountryCode
	}
	
	$comboboxO365HidefromGAL.SelectedItem = "False"
	
	$labelTimeLeft.Text = ""
	
	$global:ExternalLog = "$env:TEMP\MUC.txt"
	$labelLogFile.Text = $global:ExternalLog
	
	Update-ComboBox -ComboBox $comboboxPrimaryGroup -Items "Domain Users"
	$comboboxPrimaryGroup.SelectedItem = "Domain Users"
	
	$AlwaysADCreate = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name AlwaysADCreate -ErrorAction SilentlyContinue).AlwaysADCreate
	If ($AlwaysADCreate -eq 1)
	{
		$checkboxCreateAnActiveDirect.Checked = $true
	}
	
	$AlwaysO365Create = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name AlwaysO365Create -ErrorAction SilentlyContinue).AlwaysO365Create
	If ($AlwaysO365Create -eq 1)
	{
		$checkboxconfigo365user.Checked = $true
	}
	
	$comboboxActiveSync.SelectedItem = "True"
}

$resetFormToolStripMenuItem_Click = {
	Reset-Form
}

$buttonCreateUser_Click = {
	#If only an AD User is being made
	add-logs -text 'LOG: Checking to see what is being created'
	If (($checkboxCreateAnActiveDirect.Checked -eq $True) -and ($checkboxconfigo365user.Checked -eq $false))
	{
		add-logs -text 'LOG: Only an Active Directory user is being created'
		Try
		{
			New-MUCUser
		}
		Catch
		{
			add-logs -text "WARN: $_"
			Add-Type -AssemblyName System.Windows.Forms
			[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
		}
		
	}
	#If only Office 365 user is being created 
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true))
	{
		add-logs -text 'LOG: Only an Office 365 User is being created'
		Try
		{
			New-MUCO365User
		}
		Catch
		{
			add-logs -text "WARN: $_"
			Add-Type -AssemblyName System.Windows.Forms
			[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
		}
		
	}
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true))
	{
		add-logs -text 'LOG: Both an Office 365 User and Active Director User is being created'
		
		#### ACTIVE DIRECTORY USER CREATION PORTION ####
		
		add-logs -text 'LOG: Only an Active Directory user is being created'
		Try
		{
			New-MUCUser
		}
		Catch
		{
			add-logs -text "WARN: $_"
			Add-Type -AssemblyName System.Windows.Forms
			[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
		}
		
		
		
		#### OFFICE 365 USER CREATION PORTION ####
		
		
		add-logs -text 'LOG: Only an Office 365 User is being created'
		Try
		{
			New-MUCO365User
		}
		Catch
		{
			add-logs -text "WARN: $_"
			Add-Type -AssemblyName System.Windows.Forms
			[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
		}
	}
	Else
	{
		add-logs -text 'WARN: Nothing is being created!'
	}
	
	$ResetForm = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name ResetForm -ErrorAction SilentlyContinue).ResetForm
	If ($ResetForm -eq 1)
	{
		Reset-Form
	}
}


$textboxDisplayName_TextChanged = {
	
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	If ($DarkMode -eq 1)
	{
		If ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelDisplayName.Text = "Display Name:"
			$labelDisplayName.ForeColor = 'White'
		}
		ElseIf ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelDisplayName.Text = "*Display Name:"
			$labelDisplayName.ForeColor = 'LightCoral'
		}
		
	}
	Else
	{
		If ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelDisplayName.Text = "Display Name:"
			$labelDisplayName.ForeColor = 'Black'
		}
		ElseIf ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelDisplayName.Text = "*Display Name:"
			$labelDisplayName.ForeColor = 'Firebrick'
		}
		
	}
	
	
	
	
	#Create just an AD User
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD nad O365 User (w/ ADSync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD And O365 User (no Sync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 User no adsync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 user with ADSync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
}

$textboxDisplayName_ChangeFocus = {
	$ADDisplayName = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADDisplayName -ErrorAction SilentlyContinue).ADDisplayName
	If ($ADDisplayName -eq 1)
	{
		$words = $textboxDisplayName.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxDisplayName.Text = $TextInfo.ToTitleCase($words)
	}
}

$textboxLastName_TextChanged = {
	If ((($textboxLastName.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = ""
	}
	Else
	{
		Update-DisplayNameTextbox
		Update-EmailTextbox
		Update-SamAccountNameTextbox
		Update-UserPrincipalNameTextbox
	}
	
}

$textboxLastName_ChangeFocus = {
	$ADLastName = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADLastName -ErrorAction SilentlyContinue).ADLastName
	If ($ADLastName -eq 1)
	{
		$words = $textboxLastName.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxLastName.Text = $TextInfo.ToTitleCase($words)
	}
}

$textboxFirstName_TextChanged = {
	If ((($textboxFirstName.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = ""
	}
	Else
	{
		Update-DisplayNameTextbox
		Update-EmailTextbox
		Update-SamAccountNameTextbox
		Update-UserPrincipalNameTextbox
	}
	
	
	
		
	
}

$textboxFirstName_ChangeFocus = {
	$ADFirstName = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADFirstName -ErrorAction SilentlyContinue).ADFirstName
	If ($ADFirstName -eq 1)
	{
		$words = $textboxFirstName.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxFirstName.Text = $TextInfo.ToTitleCase($words)
	}
}

$textboxInitials_TextChanged = {
	If ((($textboxInitials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = ""
	}
	Else
	{
		Update-DisplayNameTextbox
		Update-EmailTextbox
		Update-SamAccountNameTextbox
		Update-UserPrincipalNameTextbox
	}
	
}

$textboxInitials_ChangeFocus = {
	$ADInitials = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADInitials -ErrorAction SilentlyContinue).ADInitials
	If ($ADInitials -eq 1)
	{
		$words = $textboxInitials.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxInitials.Text = $TextInfo.ToTitleCase($words)
	}
}


$buttonGeneratePassword_Click = {
	$PasswordSettings = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name PasswordGen -ErrorAction SilentlyContinue).PasswordGen
	If ($PasswordSettings -eq 0)
	{
		add-logs -text 'LOG: Generating dictionary based password'
		$Password = Get-DictionaryPassword
		$textboxPasswordGen.Text = $Password
		$maskedtextboxpassword.Text = $Password
		$textboxConfirmPassword.text = $Password
	}
	Else
	{
		
		add-logs -text 'LOG: Generating random password'
		add-logs -text 'CMD: $textboxPasswordGen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join '''
		$textboxPasswordGen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join ''
		$maskedtextboxpassword.Text = $textboxPasswordGen.Text
		$textboxConfirmPassword.text = $textboxPasswordGen.Text
	}
	
}

$textboxConfirmPassword_TextChanged = {
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	If ($DarkMode -eq 1)
	{
		If ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelConfirmPassword.Text = "Confirm Password:"
			$labelConfirmPassword.ForeColor = 'White'
		}
		ElseIf ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelConfirmPassword.Text = "*Confirm Password:"
			$labelConfirmPassword.ForeColor = 'LightCoral'
		}
		
	}
	Else
	{
		If ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelConfirmPassword.Text = "Confirm Password:"
			$labelConfirmPassword.ForeColor = 'Black'
		}
		ElseIf ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelConfirmPassword.Text = "*Confirm Password:"
			$labelConfirmPassword.ForeColor = 'Firebrick'
		}
		
	}
	
	
	If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelpasswordconfirmmessage.Text = ""
	}
	Else
	{
		If (($textboxConfirmPassword.Text) -ne ($maskedtextboxpassword.Text))
		{
			$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
			If ($DarkMode -eq 1)
			{
				$labelpasswordconfirmmessage.ForeColor = 'LightCoral'
				$labelpasswordconfirmmessage.Text = "Passwords do not match!"
				$buttonCreateUser.Enabled = $false
				
			}
			Else
			{
				$labelpasswordconfirmmessage.ForeColor = 'Red'
				$labelpasswordconfirmmessage.Text = "Passwords do not match!"
				$buttonCreateUser.Enabled = $false
				
			}
			
		}
		ElseIf (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text))
		{
			$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
			If ($DarkMode -eq 1)
			{
				$labelpasswordconfirmmessage.ForeColor = 'MediumSeaGreen'
				$labelpasswordconfirmmessage.Text = "Passwords match!"
				
			}
			Else
			{
				$labelpasswordconfirmmessage.ForeColor = 'Green'
				$labelpasswordconfirmmessage.Text = "Passwords match!"
				
			}

			#Create just an AD User
			If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD nad O365 User (w/ ADSync)
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD And O365 User (no Sync)
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 User no adsync
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 user with ADSync
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $False
			}
		}
		Else
		{
			$labelpasswordconfirmmessage.Text = ""
		}
	}
	
	
}

$buttonCopyOnPremUser_Click = {
	If ($checkboxCreateAnActiveDirect.Checked -eq $true)
	{
		add-logs -text "LOG: Copying AD User attributes to Office 365 user"
		$textboxO365LastName.Text = $textboxLastName.Text
		$textboxO365FirstName.Text = $textboxFirstName.text
		$textboxO365DisplayName.Text = $textboxDisplayName.Text
		$maskedtextboxo365password.Text = $maskedtextboxpassword.Text
		$textboxo365confirmpassword.Text = $textboxConfirmPassword.text
		$textboxo365passwordgen.Text = $textboxPasswordGen.text
		$textboxO365EmailAddress.Text = $textboxEmail.text
		$textboxO365UPN.Text = $textboxUserLogonName.text
		$comboboxO365Domains.SelectedItem = $comboboxDomains.SelectedItem
		
		#Address PAge
		$textboxo365city.Text = $textboxcity.Text
		$textboxO365street.Text = $textboxStreet.Text
		$textboxo365zip.Text = $textboxzipcode.Text
		$textboxo365state.Text = $textboxstate.text
		
		$textboxo365proxyaddresses.Text = $textboxproxyaddress.Text
		$comboboxO365HidefromGAL.SelectedItem = $comboboxhidefromGAL.SelectedItem
		
		$checkboxo365usermustchangepassword.Checked = $checkboxUserMustChangePasswo.Checked
		add-logs -text "LOG: Copy Finished!"
	}
	Else
	{
		add-logs -text "WARN: No Active Directory User is being created"
		$InfoMessage = "No Active Directory user is being created, there is nothing to copy"
		$InfoTitle = "Warning"
		Show-MessageBox_psf
	}
	
}

$textboxo365confirmpassword_TextChanged = {
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	
	If ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0)
	{
		If ($DarkMode -eq 1)
		{
			$labelO365userconfirmpassword.Text = "Confirm Password:"
			$labelO365userconfirmpassword.ForeColor = 'White'
		}
		Else
		{
			$labelO365userconfirmpassword.Text = "Confirm Password:"
			$labelO365userconfirmpassword.ForeColor = 'Black'
		}
		
		If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
		{
			$buttonCreateUser.Enabled = $true
		}
		Else
		{
			$buttonCreateUser.Enabled = $false
		}
	}
	ElseIf ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -lt 1)
	{
		If ($DarkMode -eq 1)
		{
			$labelO365userconfirmpassword.Text = "*Confirm Password:"
			$labelO365userconfirmpassword.ForeColor = 'LightCoral'
		}
		Else
		{
			$labelO365userconfirmpassword.Text = "*Confirm Password:"
			$labelO365userconfirmpassword.ForeColor = 'Firebrick'
		}
		
	}
	
	If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelo365password.Text = ""
	}
	Else
	{
		If (($textboxo365confirmpassword.Text) -ne ($maskedtextboxo365password.Text))
		{
			If ($DarkMode -eq 1)
			{
				$labelo365password.ForeColor = 'LightCoral'
				$labelo365password.Text = "Passwords do not match!"
				$buttonCreateUser.Enabled = $false
			}
			Else
			{
				$labelo365password.ForeColor = 'Red'
				$labelo365password.Text = "Passwords do not match!"
				$buttonCreateUser.Enabled = $false
			}
			
		}
		Else
		{
			If ($DarkMode -eq 1)
			{
				$labelo365password.ForeColor = 'MediumSeaGreen'
				$labelo365password.Text = "Passwords match!"
			}
			Else
			{
				$labelo365password.ForeColor = 'Green'
				$labelo365password.Text = "Passwords match!"
			}
			
			#Create just an AD User
			If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD nad O365 User (w/ ADSync)
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD And O365 User (no Sync)
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 User no adsync
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 user with ADSync
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $False
			}
		}
	}
	
}

$buttonConnectToOffice365_Click = {
	add-logs -text 'LOG: Checking MFA Status'
	If ($radiobuttonNonMFALogin.Checked -eq $True)
	{
		add-logs -text 'LOG: Gathering credentials to connect to Office 365'
		add-logs -text 'CMD: Get-Credential -Message "Please enter your Office 365 credentials to connect to Exchange Online and MSOnline"'
		$credential = Get-Credential -Message "Please enter your Office 365 credentials to connect to Exchange Online and MSOnline"
		add-logs -text 'LOG: Done'
		If ($credential -eq $Null)
		{
			add-logs -text 'WARN: Credential object empty'
			$InfoMessage = "No credentials were entered. Please enter valid Office 365 credentials"
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			add-logs -text 'LOG: Connecting to Office 365'
			add-logs -text 'CMD: Connect-MsolService -Credential $credential'
			Import-Module MSOnline
			Connect-MsolService -Credential $credential
			$exchangeSession = New-PSSession -ConfigurationName Microsoft.Exchange -ConnectionUri "https://outlook.office365.com/powershell-liveid/" -Authentication "Basic" -AllowRedirection -Credential $credential
			add-logs -text 'LOG: Done'
			add-logs -text 'LOG: Connecting to Exchange Online'
			add-logs -text 'CMD: Import-PSSession $exchangeSession -AllowClobber'
			Import-PSSession $exchangeSession -AllowClobber
			add-logs -text 'LOG: Done'
		}
	}
	Else
	{
		add-logs -text 'LOG: Finding MFA Exchange Online Module'
		add-logs -text 'CMD: $((Get-ChildItem -Path $($env:LOCALAPPDATA+"\Apps\2.0\") -Filter Microsoft.Exchange.Management.ExoPowershellModule.dll -Recurse ).FullName|?{$_ -notmatch "_none_"}|select -First 1)'
		$Modules = $((Get-ChildItem -Path $($env:LOCALAPPDATA + "\Apps\2.0\") -Filter Microsoft.Exchange.Management.ExoPowershellModule.dll -Recurse).FullName | Where-Object{ $_ -notmatch "_none_" } | Select-Object -First 1)
		If ($Modules -eq $Null)
		{
			add-logs -text 'WARN: MFA Module was not found'
			$InfoMessage = "Exchange Online MFA Module was not found, please make sure you have downloaded and installed it from your tenant https://docs.microsoft.com/en-us/powershell/exchange/exchange-online/connect-to-exchange-online-powershell/mfa-connect-to-exchange-online-powershell?view=exchange-ps"
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		foreach ($Module in $Modules)
		{
			Import-Module "$Module"
		}
		add-logs -text 'LOG: Done'
		add-logs -text 'LOG: Connecting to MSOnline'
		#Connect to MSOnline w/2FA
		Connect-MsolService
		add-logs -text 'LOG: Done'
		#Connect to Exchange Online w/ 2FA
		add-logs -text 'LOG: Connecting to Exchange Online'
		$EXOSession = New-ExoPSSession
		Import-PSSession $EXOSession
		add-logs -text 'LOG: Done'
	}
	add-logs -text 'LOG: Checking to see if we are connected to Office 365'
	add-logs -text 'CMD: (Get-MsolDomain -ErrorAction SilentlyContinue) -ne $null'
	if ((Get-MsolDomain -ErrorAction SilentlyContinue) -ne $null)
	{
		
		$copyOffice365UserToolStripMenuItem.Enabled = $true
		
		add-logs -text 'LOG: Connected to Office 365!'
		$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
		If ($DarkMode -eq 1)
		{
			$labelconnectionstatus.Text = "Connected"
			$labelconnectionstatus.ForeColor = 'MediumSeaGreen'
		}
		Else
		{
			$labelconnectionstatus.Text = "Connected"
			$labelconnectionstatus.ForeColor = 'Green'
		}
		
		
		$Global:O365_Pre_Req++
		#Create just an AD User
		If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
		{
			$buttonCreateUser.Enabled = $true
		}
		#Create AD nad O365 User (w/ ADSync)
		ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
		{
			$buttonCreateUser.Enabled = $true
		}
		#Create AD And O365 User (no Sync)
		ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
		{
			$buttonCreateUser.Enabled = $true
		}
		#Create just an O365 User no adsync
		ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
		{
			$buttonCreateUser.Enabled = $true
		}
		#Create just an O365 user with ADSync
		ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
		{
			$buttonCreateUser.Enabled = $true
		}
		Else
		{
			$buttonCreateUser.Enabled = $False
		}
		
		$labelO365Groups.Text = "To add your user to a Mail Enabled Group, please select a valid license so the user has a mailbox"
		$labelsharedmailboxes.text = "To grant your user permissions on a Shared Mailbox, please select a valid license so the user has a mailbox"
		$labelSecurityGroups.Text = "Please select any Security Groups you want to add your new user to"
		
		add-logs -text 'LOG: Enabling Disconnect from Office 365 menu item'
		add-logs -text 'CMD: $disconnectFromOffice365ToolStripMenuItem.Enabled = $true'
		$disconnectFromOffice365ToolStripMenuItem.Enabled = $true
		add-logs -text 'LOG: Done'
		
		add-logs -text 'LOG: Disabling connect to Office 365 button!'
		add-logs -text 'CMD: $buttonConnectToOffice365.Enabled = $False'
		$buttonConnectToOffice365.Enabled = $False
		$buttonConnectToOffice365.Text = "Connected to Office 365"
		$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
		If ($DarkMode -eq 1)
		{
			$buttonConnectToOffice365.ForeColor = 'White'
		}
		Else
		{
			$buttonConnectToOffice365.ForeColor = 'Black'
		}
		
		add-logs -text 'LOG: Done'
		
		If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
		{
			$buttonCreateUser.Enabled = $true
		}
		Else
		{
			$buttonCreateUser.Enabled = $false
		}
		
		add-logs -text 'LOG: Getting all verified domains for UPN list'
		add-logs -text 'CMD: Update-ComboBox -ComboBox $comboboxO365Domains -Items (Get-MsolDomain | Where-Object {$_.Status -eq "Verified"} | Select-Object -ExpandProperty Name)'
		$DomainsArray = @()
		$Domains = (Get-MsolDomain | Where-Object { $_.Status -eq 'Verified' } | Select-Object -ExpandProperty Name)
		If ($Domains -ne $Null)
		{
			foreach ($Domain in $Domains)
			{
				$DomainsArray += "@" + $Domain
			}
		}
		Else
		{
			add-logs -text 'WARN: No verified domains'
			$DomainsArray = "No verified Domains were found"
		}
		Update-ComboBox -ComboBox $comboboxO365Domains -Items $DomainsArray
		add-logs -text 'LOG: Done'
		
		
		#We only want licenses that have at least one to assign to a user
		$LicenseArray = @()
		
		
		add-logs -text 'LOG: Getting available licenses'
		add-logs -text 'CMD: Get-MsolAccountSku | Where-Object { $_.ActiveUnits -ne $_.ConsumedUnits }'
		$Avaialble = Get-MsolAccountSku | Where-Object { $_.ActiveUnits -ne $_.ConsumedUnits }
		add-logs -text 'LOG: Done'
		
		foreach ($item in $Avaialble)
		{
			add-logs -text 'LOG: Getting Account SKU for license'
			$RemoveDomain = ($item).AccountSkuId
			add-logs -text 'LOG: Removing domain portion of license'
			$LicenseItem = $RemoveDomain -split ":" | Select-Object -Last 1
			add-logs -text 'LOG: Converting SKU to friendly name'
			$TextLic = $Sku.Item("$LicenseItem")
			If (!($TextLic))
			{
				$LicenseArray += $LicenseItem
			}
			Else
			{
				$LicenseArray += $TextLic
			}
			add-logs -text 'LOG: Done'
		}
		
		#add-logs -text 'LOG: Enabling Licenses combobox'
		#add-logs -text 'CMD: $comboboxO365Licenses.Enabled = $True'
		#$comboboxO365Licenses.Enabled = $True
		#add-logs -text 'LOG: Done'
		$comboboxO365Licenses.Text = ""
		
		#Cache licenses to use in other forms
		$LicenseArray | Out-File "$env:TEMP\MUCLicenses.txt" -Force -ErrorAction SilentlyContinue
		
		
		add-logs -text 'LOG: Loading license combobox with available licenses'
		#add-logs -text 'CMD: Update-ComboBox -ComboBox $comboboxO365Licenses ($Avaialble).AccountSkuId'
		#Update-ComboBox -ComboBox $comboboxO365Licenses $LicenseArray
		add-logs -text 'LOG: Done'
		$comboboxO365Licenses.Text = "Click to select an Office 365 license"

		
		
		add-logs -text 'LOG: Loading Office 365 Mail Groups ListBox'
		add-logs -text 'CMD: Update-ListBox -ListBox $checkedlistboxDISTROo365groups -Items (Get-MsolGroup -All | Where-Object {($_.GroupType -eq "DistributionList") -or ($_.GroupType -eq "MailEnabledSecurity") }| Select-Object -ExpandProperty DisplayName | Sort-Object)'
		$MailGroups = (Get-MsolGroup -All | Where-Object { ($_.GroupType -eq "DistributionList") -or ($_.GroupType -eq "MailEnabledSecurity") } | Select-Object -ExpandProperty DisplayName | Sort-Object)
		$Global:OriginalDataMailGroups = $MailGroups
		Update-ListBox -ListBox $checkedlistboxDISTROo365groups -Items $MailGroups
		$comboboxO365Domains.SelectedIndex = 0
		add-logs -text 'LOG: Done'
		
		add-logs -text 'LOG: Loading Office 365 Security Groups ListBox'
		add-logs -text 'CMD: Update-ListBox -ListBox $checkedlistboxO365SecurityGroups -Items (Get-MsolGroup -All | Where-Object { $_.GroupType -like "*Security*" } | Select-Object -ExpandProperty DisplayName | Sort-Object)'
		$SecurityGroups = (Get-MsolGroup -All | Where-Object { $_.GroupType -eq "Security" } | Select-Object -ExpandProperty DisplayName | Sort-Object)
		$Global:OriginalDataSecurityGroups = $SecurityGroups
		Update-ListBox -ListBox $checkedlistboxO365SecurityGroups -Items $SecurityGroups
		$comboboxO365Domains.SelectedIndex = 0
		$labelSecurityGroups.Text = "Please select any Security Groups you want to add your new user to"
		
		add-logs -text 'LOG: Done'
		
		
		$labelO365Groups.Text = "To add your user to a Mail Enabled Group, please select a valid license so the user has a mailbox"
		
		$labelsharedmailboxes.text = "To grant your user permissions on a Shared Mailbox, please select a valid license so the user has a mailbox"
		
		add-logs -text 'LOG: Getting all Shared Mailboxes'
		$Shared = Get-Mailbox | Where-Object { $_.RecipientTypeDetails -eq "SharedMailbox" } | Select-Object -ExpandProperty DisplayName | Sort-Object
		Update-ListBox -ListBox $checkedlistboxsharedmailboxes -Items $Shared
		add-logs -text 'LOG: Done'
		$comboboxO365HidefromGAL.SelectedItem = "False"
		
	}
	Else
	{
		add-logs -text 'WARN: Not connected to Office 365!'
	}
	
	
	
}



$buttonO365Genpassword_Click = {
	$PasswordSettings = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name PasswordGen -ErrorAction SilentlyContinue).PasswordGen
	If ($PasswordSettings -eq 0)
	{
		add-logs -text 'LOG: Generating dictionary based password'
		$Password = Get-DictionaryPassword -O365
		$textboxo365passwordgen.Text = $Password
		$maskedtextboxo365password.Text = $Password
		$textboxo365confirmpassword.Text = $Password
	}
	Else
	{
		
		add-logs -text 'LOG: Generating random password'
		add-logs -text 'LOG: ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join '''
		$textboxo365passwordgen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join ''
		$maskedtextboxo365password.Text = $textboxo365passwordgen.Text
		$textboxo365confirmpassword.Text = $textboxo365passwordgen.Text
		add-logs -text 'LOG: Done'
	}

	
	
}


$checkboxRunADSync_CheckedChanged = {
	If ($checkboxRunADSync.Checked -eq $True)
	{
		$groupboxNoAdSync.Enabled = $false
		$textboxO365FirstName.Enabled = $false
		$textboxO365DisplayName.Enabled = $false
		$textboxO365LastName.Enabled = $false
		$buttonCopyOnPremUser.Enabled = $false
		$buttonO365Genpassword.Enabled = $false
		$textboxConfirmPassword.Enabled = $false
		$maskedtextboxo365password.Enabled = $false
		$textboxO365UPN.Enabled = $false
		$textboxo365state.Enabled = $false
		$textboxo365city.Enabled = $false
		$textboxo365zip.Enabled = $false
		
		$labelO365Groups.Text = "This feature is not available for AD-Synced enviornments."
		
		$textboxADSyncServer.Enabled = $true
		
	}
	elseif ($checkboxRunADSync.Checked -eq $false)
	{
		$groupboxNoAdSync.Enabled = $True
		$textboxO365FirstName.Enabled = $true
		$textboxO365DisplayName.Enabled = $true
		$textboxO365LastName.Enabled = $true
		$buttonCopyOnPremUser.Enabled = $true
		$buttonO365Genpassword.Enabled = $true
		$textboxConfirmPassword.Enabled = $true
		$maskedtextboxo365password.Enabled = $true
		$textboxO365UPN.Enabled = $true
		$textboxo365state.Enabled = $true
		$textboxo365city.Enabled = $true
		$textboxo365zip.Enabled = $true
		
		$labelO365Groups.Text = "Please check all groups you want your user to be a member of."
		
		$textboxADSyncServer.Enabled = $false
		
	}
	
	#Create just an AD User
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD nad O365 User (w/ ADSync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD And O365 User (no Sync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 User no adsync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 user with ADSync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
}

$buttonExit_Click = {
	Get-PSSession | Remove-PSSession
	$MainForm.close()
}

$textboxO365LastName_TextChanged = {
	If ((($textboxO365LastName.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = ""
	}
	Else
	{
		Update-O365EmailTextbox
		Update-O365DisplayNameTextBox
		Update-O365UserPrincipalNameTextbox
	}
}
$textboxO365LastName_FocusChanged = {
	$O365LastName = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\O365' | Get-ItemProperty -Name O365LastName -ErrorAction SilentlyContinue).O365LastName
	If ($O365LastName -eq 1)
	{
		$words = $textboxO365LastName.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxO365LastName.Text = $TextInfo.ToTitleCase($words)
	}
}

$textboxO365FirstName_TextChanged = {
	If ((($textboxO365FirstName.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = ""
	}
	Else
	{
		Update-O365EmailTextbox
		Update-O365DisplayNameTextBox
		Update-O365UserPrincipalNameTextbox
	}
	
}

$textboxO365FirstName_FocusChanged = {
	$O365FirstName = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\O365' | Get-ItemProperty -Name O365FirstName -ErrorAction SilentlyContinue).O365FirstName
	If ($O365FirstName -eq 1)
	{
		$words = $textboxO365FirstName.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxO365FirstName.Text = $TextInfo.ToTitleCase($words)
	}
}

$textboxO365Initials_TextChanged = {
	If ((($textboxO365Initials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365LastName.Text
	}
	Else
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365Initials.text + "." + $textboxO365LastName.Text
	}
	
}



$console_TextChanged = {
	$console.SelectionStart = $console.TextLength;
	$console.ScrollToCaret()
	$console.Focus()
	
	If ($Global:ExternalLog -ne $null)
	{
		$console.Text | Out-File $Global:ExternalLog
	}
	
}

$buttonO365Clear_Click = {
	add-logs -text 'LOG: Clearing randomly generated password'
	add-logs -text 'CMD: $textboxo365passwordgen.text = ""'
	$textboxo365passwordgen.text = ""
	
}

$buttonClear_Click = {
	add-logs -text 'LOG: Clearing randomly generated password'
	add-logs -text 'CMD: $textboxPasswordGen.Text = "" '
	$textboxPasswordGen.Text = ""
}

$checkboxconfigo365user_CheckedChanged = {
	if ($checkboxconfigo365user.CheckState -eq 'checked')
	{
		$tabpageOffice365.Enabled = $true
	}
	Else
	{
		$tabpageOffice365.Enabled = $false
		
	}
	
	#Create just an AD User
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD and O365 User (w/ ADSync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD And O365 User (no Sync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 User no adsync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 user with ADSync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
	If (($checkboxconfigo365user.Checked -eq $true))
	{
		add-logs -text 'LOG: Checking if DirSync is present on localhost'
		If ($null -ne (Get-Module -ListAvailable -Name "ADSync"))
		{
			add-logs -text 'LOG: DirSync found on local system'
			$checkboxRunADSync.Enabled = $True
			$groupboxADSync.Enabled = $true
			add-logs -text 'LOG: Done'
		}
		Else
		{
			add-logs -text 'LOG: No DirSync Found on local system'
			$checkboxRunADSync.Enabled = $True
			$groupboxADSync.Enabled = $true
			$groupboxNoAdSync.Enabled = $true
			$comboboxOWA.SelectedItem = "True"
			add-logs -text 'LOG: Done'
		}
	}
	Else
	{
		add-logs -text 'LOG: Enabling ADSync CheckBox'
		$checkboxRunADSync.Enabled = $True
		add-logs -text 'LOG: Enabling No ADSync Groupbox'
		$groupboxNoAdSync.Enabled = $true
		add-logs -text 'LOG: Done'
	}
	
}

$checkboxCreateAnActiveDirect_CheckedChanged = {
	
	
	
	
	#Create just an AD User
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD and O365 User (w/ ADSync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD And O365 User (no Sync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 User no adsync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 user with ADSync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
	If (($checkboxCreateAnActiveDirect.Checked -eq $true))
	{
		If ($Null -ne (Get-Module -ListAvailable -Name "ActiveDirectory"))
		{
			add-logs -text 'LOG: Enabling AD User creation'
			$tabcontrolUserProperties.Enabled = $true
			add-logs -text 'LOG: Done'
			
			Add-Logs -text "Enabling Copy AD User Menu Item"
			$copyActiveDirectoryUserToolStripMenuItem.Enabled = $true
			add-logs -text 'LOG: Done'
			
			
			add-logs -text 'LOG: Loading Organizational Unit Tree'
			add-logs -text "CMD: `$OUTree = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Sort-Object | Select-Object -Property CanonicalName).CanonicalName"
			$OUTree = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Sort-Object | Select-Object -Property CanonicalName).CanonicalName
			If ($null -eq $OUTree)
			{
				$InfoMessage = 'Could not load Organizational Unit structure'
				$InfoTitle = "Warning"
				Show-MessageBox_psf
				$comboboxOUTree.Enabled = $false
			}
			Else
			{
				add-logs -text "CMD: Update-ComboBox -ComboBox `$comboboxOUTree -Items $OUTree"
				Update-ComboBox -ComboBox $comboboxOUTree -Items $OUTree
				add-logs -text 'LOG: Done'
				$comboboxOUTree.Enabled = $true
			}
			
			add-logs -text 'LOG: Getting Active Directory Groups'
			add-logs -text 'CMD: $Groups = Get-ADGroup -Filter * | Where-Object {($_.Name -ne "Domain Users") -and ($_.Name -ne "Domain Computers")} | Select-Object -ExpandProperty Name | Sort-Object'
			$Groups = Get-ADGroup -Filter * | Where-Object { ($_.Name -ne "Domain Users") -and ($_.Name -ne "Domain Computers") } | Select-Object -ExpandProperty Name | Sort-Object
			$Global:OriginalData = $Groups
			If ($null -eq $Groups)
			{
				add-logs -text 'WARN: No Active Directory Groups were found'
				$InfoMessage = 'No Active Directory Group objects were found when running Get-ADGroup'
				$InfoTitle = "Warning"
				Show-MessageBox_psf
			}
			Else
			{
				add-logs -text 'CMD: Update-ListBox -ListBox $checkedlistboxGroups -Items $Groups'
				Update-ListBox -ListBox $checkedlistboxGroups -Items $Groups
				add-logs -text 'LOG: Done'
			}
			
			add-logs -text 'LOG: Getting NetBIOS Name'
			add-logs -text 'CMD: (Get-ADDomain).NetBIOSName'
			$Netbiosname = (Get-ADDomain).NetBIOSName
			If ($null -eq $Netbiosname)
			{
				add-logs -text 'WARN: No NetBIOS Name was found'
				$InfoMessage = 'No NetBIOS Name was found when running (Get-ADDomain).NetBIOSName'
				$InfoTitle = "Warning"
				Show-MessageBox_psf
				$textboxUPNDomain.Text = "Not Available"
			}
			Else
			{
				$textboxUPNDomain.Text = $Netbiosname + "\"
				add-logs -text 'LOG: Done'
			}
			
			add-logs -text 'LOG: Getting UPN Suffixes'
			add-logs -text 'CMD: $Forest = Get-ADForest'
			$Forest = Get-ADForest
			If ($null -eq $Forest)
			{
				add-logs -text 'WARN: No Active Directory Forest was found'
				$InfoMessage = 'No Active Directory Forest was found when running Get-ADForest'
				$InfoTitle = "Warning"
				Show-MessageBox_psf
				$comboboxDomains.Enabled = $false
			}
			Else
			{
				$comboboxDomains.Enabled = $true
				$UPNs = @()
				add-logs -text 'CMD: ($Forest | Select-Object UPNSuffixes -ExpandProperty UPNSuffixes)'
				$extraUPNS = ($Forest | Select-Object UPNSuffixes -ExpandProperty UPNSuffixes)
				If ($extraUPNs -ne $Null)
				{
					foreach ($extraUPN in $extraUPNs)
					{
						$UPNs += "@" + $extraUPN
					}
				}
				add-logs -text 'CMD: $UPNs += "@" +  ($Forest | Select-Object -ExpandProperty Name)'
				$UPNs += "@" + ($Forest | Select-Object -ExpandProperty Name)
				Update-ComboBox -ComboBox $comboboxDomains -Items $UPNs
			}
			add-logs -text 'LOG: Done'
			
			$comboboxDomains.SelectedIndex = 0
		}
		Else
		{
			$InfoMessage = "Could not locate the ActiveDirectory module on $env:COMPUTERNAME. This module is required to create an Active Directory user"
			$InfoTitle = "Error"
			Show-MessageBox_psf
			$checkboxCreateAnActiveDirect.CheckState = 'Unchecked'
		}
	}
	Else
	{
		$tabcontrolUserProperties.Enabled = $false
	}
	
}

$copyAllLogToClipboardToolStripMenuItem_Click = {
	add-logs -text 'LOG: Copying log to clipboard'
	add-logs -text 'CMD: $console.Text | clip'
	$console.Text | clip
	add-logs -text 'LOG: Done'
	
}

$clearLogToolStripMenuItem_Click = {
	add-logs -text 'LOG: Clearing log'
	add-logs -text 'CMD: $console.Text = ""'
	$console.Text = ""
	
}

$exitToolStripMenuItem_Click = {
	Get-PSSession | Remove-PSSession
	$MainForm.close()
	
}



$textboxUserLogonName_TextChanged = {
	
	Update-SamAccountNameTextbox
	Update-DisplayNameTextbox
	Update-EmailTextbox
	
	$textboxSamAccount.Text = $textboxUserLogonName.Text
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	If ($DarkMode -eq 1)
	{
		If ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelUserLogonNameUPN.Text = "User logon name: (UPN)"
			$labelUserLogonNameUPN.ForeColor = 'White'
		}
		ElseIf ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelUserLogonNameUPN.Text = "*User logon name: (UPN)"
			$labelUserLogonNameUPN.ForeColor = 'LightCoral'
		}
		
	}
	Else
	{
		If ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelUserLogonNameUPN.Text = "User logon name: (UPN)"
			$labelUserLogonNameUPN.ForeColor = 'Black'
		}
		ElseIf ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelUserLogonNameUPN.Text = "*User logon name: (UPN)"
			$labelUserLogonNameUPN.ForeColor = 'Firebrick'
		}
		
	}
	
	
	
	#Create just an AD User
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD nad O365 User (w/ ADSync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD And O365 User (no Sync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 User no adsync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 user with ADSync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
}

$textboxUserLogonName_FocusChanged = {
	$ADUPN = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADUPN -ErrorAction SilentlyContinue).ADUPN
	If ($ADUPN -eq 1)
	{
		$words = $textboxUserLogonName.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxUserLogonName.Text = $TextInfo.ToTitleCase($words)
	}
}




$maskedtextboxpassword_TextChanged = {
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	If ($DarkMode -eq 1)
	{
		If ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelPassword.Text = "Password:"
			$labelPassword.ForeColor = 'White'
			
		}
		ElseIf ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelPassword.Text = "*Password:"
			$labelPassword.ForeColor = 'LightCoral'
			
		}
		
	}
	Else
	{
		If ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelPassword.Text = "Password:"
			$labelPassword.ForeColor = 'Black'
			
		}
		ElseIf ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelPassword.Text = "*Password:"
			$labelPassword.ForeColor = 'Firebrick'
			
		}
		
	}
	
	
	If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelpasswordconfirmmessage.Text = ""
	}
	Else
	{
		If (($textboxConfirmPassword.Text) -ne ($maskedtextboxpassword.Text))
		{
			$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
			If ($DarkMode -eq 1)
			{
				$labelpasswordconfirmmessage.ForeColor = 'LightCoral'
				$labelpasswordconfirmmessage.Text = "Passwords do not match!"
				$buttonCreateUser.Enabled = $false
				
			}
			Else
			{
				$labelpasswordconfirmmessage.ForeColor = 'Red'
				$labelpasswordconfirmmessage.Text = "Passwords do not match!"
				$buttonCreateUser.Enabled = $false
				
			}
			
		}
		ElseIf (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text))
		{
			$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
			If ($DarkMode -eq 1)
			{
				$labelpasswordconfirmmessage.ForeColor = 'MediumSeaGreen'
				$labelpasswordconfirmmessage.Text = "Passwords match!"
				
			}
			Else
			{
				$labelpasswordconfirmmessage.ForeColor = 'Green'
				$labelpasswordconfirmmessage.Text = "Passwords match!"
				
			}
			
			#Create just an AD User
			If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD nad O365 User (w/ ADSync)
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD And O365 User (no Sync)
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 User no adsync
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 user with ADSync
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $False
			}
		}
		Else
		{
			$labelpasswordconfirmmessage.Text = ""
		}
	}
	
	
}



$linklabelBradleyWyatt_LinkClicked = [System.Windows.Forms.LinkLabelLinkClickedEventHandler]{
	add-logs -text 'LOG: Navigating to author site'
	add-logs -text 'CMD: start-process -FilePath "https://www.linkedin.com/in/bradleywyatt/"'
	start-process -FilePath "https://www.linkedin.com/in/bradleywyatt/"
	add-logs -text 'LOG: Done'
	
}

$linklabelGitHub_LinkClicked = [System.Windows.Forms.LinkLabelLinkClickedEventHandler]{
	add-logs -text 'LOG: Navigating to GitHub Project site'
	add-logs -text 'CMD: Start-Process -FilePath "https://github.com/bwya77/AD-Master-User-Creator"'
	Start-Process -FilePath "https://github.com/bwya77/AD-Master-User-Creator"
	add-logs -text 'LOG: Done'
	
}

$textboxO365DisplayName_TextChanged = {
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	If ($DarkMode -eq 1)
	{
		If ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelO365DisplayName.Text = "Display Name:"
			$labelO365DisplayName.ForeColor = 'White'
		}
		ElseIf ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelO365DisplayName.Text = "*Display Name:"
			$labelO365DisplayName.ForeColor = 'LightCoral'
		}
	}
	Else
	{
		If ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelO365DisplayName.Text = "Display Name:"
			$labelO365DisplayName.ForeColor = 'Black'
		}
		ElseIf ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelO365DisplayName.Text = "*Display Name:"
			$labelO365DisplayName.ForeColor = 'Firebrick'
		}
	}
	
	
	#Create just an AD User
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD nad O365 User (w/ ADSync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD And O365 User (no Sync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 User no adsync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 user with ADSync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
}

$textboxO365DisplayName_FocusChanged = {
	$O365DisplayName = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\O365' | Get-ItemProperty -Name O365DisplayName -ErrorAction SilentlyContinue).O365DisplayName
	If ($O365DisplayName -eq 1)
	{
		$words = $textboxO365DisplayName.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxO365DisplayName.Text = $TextInfo.ToTitleCase($words)
	}
}

$textboxO365UPN_TextChanged = {
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	
	If ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0)
	{
		Update-O365EmailTextbox
		If ($DarkMode -eq 1)
		{
			$labelO365UserPrincipalName.Text = "UserPrincipalName:"
			$labelO365UserPrincipalName.ForeColor = 'White'
		}
		Else
		{
			$labelO365UserPrincipalName.Text = "UserPrincipalName:"
			$labelO365UserPrincipalName.ForeColor = 'Black'
		}
		
	}
	ElseIf ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -lt 1)
	{
		If ($DarkMode -eq 1)
		{
			$labelO365UserPrincipalName.Text = "*UserPrincipalName:"
			$labelO365UserPrincipalName.ForeColor = 'LightCoral'
		}
		Else
		{
			$labelO365UserPrincipalName.Text = "*UserPrincipalName:"
			$labelO365UserPrincipalName.ForeColor = 'Firebrick'
		}
		
		
	}
	#Create just an AD User
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD nad O365 User (w/ ADSync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD And O365 User (no Sync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 User no adsync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 user with ADSync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
}

$textboxO365UPN_FocusChanged = {
	$O365UPN = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\O365' | Get-ItemProperty -Name O365UPN -ErrorAction SilentlyContinue).O365UPN
	If ($O365UPN -eq 1)
	{
		$words = $textboxO365UPN.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxO365UPN.Text = $TextInfo.ToTitleCase($words)
	}
}


$maskedtextboxo365password_TextChanged = {
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	If ($DarkMode -eq 1)
	{
		If ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelO365userpassword.Text = "Password:"
			$labelO365userpassword.ForeColor = 'White'
		}
		ElseIf ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelO365userpassword.Text = "*Password:"
			$labelO365userpassword.ForeColor = 'lightcoral'
		}
	}
	Else
	{
		If ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelO365userpassword.Text = "Password:"
			$labelO365userpassword.ForeColor = 'Black'
		}
		ElseIf ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelO365userpassword.Text = "*Password:"
			$labelO365userpassword.ForeColor = 'Firebrick'
		}
	}
	
	
	If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelo365password.Text = ""
	}
	Else
	{
		
		If (($textboxo365confirmpassword.Text) -ne ($maskedtextboxo365password.Text))
		{
			If ($DarkMode -eq 1)
			{
				$labelo365password.ForeColor = 'LightCoral'
				$labelo365password.Text = "Passwords do not match!"
				$buttonCreateUser.Enabled = $false
			}
			Else
			{
				$labelo365password.ForeColor = 'Red'
				$labelo365password.Text = "Passwords do not match!"
				$buttonCreateUser.Enabled = $false
			}
			
		}
		Else
		{
			If ($DarkMode -eq 1)
			{
				$labelo365password.ForeColor = 'MediumSeaGreen'
				$labelo365password.Text = "Passwords match!"
			}
			Else
			{
				$labelo365password.ForeColor = 'Green'
				$labelo365password.Text = "Passwords match!"
			}
			
			
			#Create just an AD User
			If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD nad O365 User (w/ ADSync)
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD And O365 User (no Sync)
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 User no adsync
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 user with ADSync
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $False
			}
		}
	}
}

$comboboxO365Licnses_Click = {
	Show-O365LicenseSelection_psf
	$comboboxO365Licenses.text = "Selected Licenses: $($Licenses2Add.count)"
	
	
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	
	Toogle-LicenseStatus
}





$comboboxO365countrycode_SelectedIndexChanged = {
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	
	If (($comboboxO365countrycode.SelectedItem -eq $Null) -and ($comboboxO365Licenses.SelectedItem -ne $null))
	{
		If ($DarkMode -eq 1)
		{
			$labelCountryCode.Text = "*Country Code"
			$labelCountryCode.ForeColor = 'LightCoral'
		}
		Else
		{
			$labelCountryCode.Text = "*Country Code"
			$labelCountryCode.ForeColor = 'Firebrick'
		}
		
	}
	Else
	{
		If ($DarkMode -eq 1)
		{
			$labelCountryCode.Text = "Country Code"
			$labelCountryCode.ForeColor = 'White'
		}
		Else
		{
			$labelCountryCode.Text = "Country Code"
			$labelCountryCode.ForeColor = 'Black'
		}
		
	}
	
	
}

$disconnectFromOffice365ToolStripMenuItem_Click = {
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	If ($DarkMode -eq 1)
	{
		$Global:O365_Pre_Req--
		Add-Logs -text 'LOG: Removing PSSessiong'
		Add-Logs -text 'CMD: Get-PSSession | Remove-PSSession'
		Get-PSSession | Remove-PSSession
		$buttonConnectToOffice365.Enabled = $true
		$buttonConnectToOffice365.Text = "*Connect to Office 365"
		$buttonConnectToOffice365.ForeColor = 'LightCoral'
		Add-Logs -text 'LOG: Done'
		$disconnectFromOffice365ToolStripMenuItem.Enabled = $false
		$labelconnectionstatus.Text = "Not Connected"
		$labelconnectionstatus.ForeColor = 'LightCoral'
	}
	Else
	{
		$Global:O365_Pre_Req--
		Add-Logs -text 'LOG: Removing PSSessiong'
		Add-Logs -text 'CMD: Get-PSSession | Remove-PSSession'
		Get-PSSession | Remove-PSSession
		$buttonConnectToOffice365.Enabled = $true
		$buttonConnectToOffice365.Text = "*Connect to Office 365"
		$buttonConnectToOffice365.ForeColor = 'Firebrick'
		Add-Logs -text 'LOG: Done'
		$disconnectFromOffice365ToolStripMenuItem.Enabled = $false
		$labelconnectionstatus.Text = "Not Connected"
		$labelconnectionstatus.ForeColor = 'Firebrick'
	}
	
	
}



$saveLogAsToolStripMenuItem_Click = {
	$SaveChooser = New-Object -Typename System.Windows.Forms.SaveFileDialog
	$SaveChooser.title = "Save Log File"
	$SaveChooser.filter = "Text File|*.txt"
	$SaveChooser.ShowDialog()
	$console.Text | Out-File $SaveChooser.Filename
	
}

$comboboxsharedmaiboxpermission_SelectedIndexChanged = {
	If ($comboboxsharedmaiboxpermission.SelectedItem -eq "Full Access")
	{
		$comboboxsharedmailboxautomap.Enabled = $true
		Update-ComboBox -ComboBox $comboboxsharedmailboxautomap -Items "True", "False"
		$comboboxsharedmailboxautomap.SelectedIndex = 0
	}
	Else
	{
		Update-ComboBox -ComboBox $comboboxsharedmailboxautomap -Items ""
		$comboboxsharedmailboxautomap.Enabled = $false
		
	}
	
}




$versionToolStripMenuItem_Click = {
	$InfoMessage = "
Version Number: $Version
Build Date: $Builddate
Author: Bradley Wyatt
"
	$InfoTitle = "Build Information"
	Show-MessageBox_psf
	
}


$changelogToolStripMenuItem_Click = {
	Show-ChangeLog_psf
	
}

$labelChangelog_Click = {
	Show-ChangeLog_psf
	
}

$externalLogFileToolStripMenuItem_Click = {
	# Class Details:  https://msdn.microsoft.com/en-us/library/system.windows.forms.savefiledialog(v=vs.110).aspx 
	$SaveFileDialog = New-Object windows.forms.savefiledialog
	$SaveFileDialog.initialDirectory = [System.IO.Directory]::GetCurrentDirectory()
	$SaveFileDialog.title = "Log File Location"
	#$SaveFileDialog.filter = "All files (*.*)| *.*"   
	#$SaveFileDialog.filter = "PublishSettings Files|*.publishsettings|All Files|*.*" 
	$SaveFileDialog.filter = "Log Text File|*.txt"
	$SaveFileDialog.ShowHelp = $True
	$result = $SaveFileDialog.ShowDialog()
	$result
	$Global:ExternalLog = $SaveFileDialog.filename
	Write-Host $result
	If ($result -eq "Ok")
	{
		
		$labelLogFile.Text = $global:ExternalLog
		
	}
}


$radiobuttonExpireOn_CheckedChanged = {
	#Enable the Date Date / Time picker
	$datetimepickerDATE.Enabled = $true
	#Enable the Time date/time picker
	$datetimepickerTIME.Enabled = $true
	
}

$radiobuttonNever_CheckedChanged = {
	#Disable the Date Date/Time picker
	$datetimepickerDATE.Enabled = $false
	#Disable the Time Date/Time picker
	$datetimepickerTIME.Enabled = $false
	
}

$datetimepickerDATE_ValueChanged = {
	$TimeUntil = (New-TimeSpan –Start ((Get-Date -Format "dddd, MMMM, dd, yyyy") + " " + (get-date -Format "HH:mm")) –End (($datetimepickerDATE.Value.ToLongDateString()) + " " + $datetimepickerTIME.Value.ToString("HH:mm")))
	$Days = $TimeUntil.Days
	$Hours = $TimeUntil.Hours
	$Minutes = $TimeUntil.Minutes
	$labelTimeLeft.Text = "In $Days days, $Hours hours, and $Minutes minutes"
	
}

$datetimepickerTIME_ValueChanged = {
	$TimeUntil = (New-TimeSpan –Start ((Get-Date -Format "dddd, MMMM, dd, yyyy") + " " + (get-date -Format "HH:mm")) –End (($datetimepickerDATE.Value.ToLongDateString()) + " " + $datetimepickerTIME.Value.ToString("HH:mm")))
	$Days = $TimeUntil.Days
	$Hours = $TimeUntil.Hours
	$Minutes = $TimeUntil.Minutes
	$labelTimeLeft.Text = "In $Days days, $Hours hours, and $Minutes minutes"
	
}

$checkedlistboxGroups_SelectedIndexChanged = {

	If ($click -ne 1)
	{
		$CachedCheckedGroups = Get-Content $CacheGroups -ErrorAction SilentlyContinue
		
		$checkedlistboxGroups.CheckedItems | ForEach-Object{
			#If checked and not in file, add and append
			$CheckItem = Get-Content $CacheGroups | Select-String $_
			If ($null -eq $CheckItem)
			{				
				$_ | Out-File $CacheGroups -Force -Append
			}
		}
		
		$CachedCheckedGroups = Get-Content $CacheGroups -ErrorAction SilentlyContinue
		
		
		#Get all unchecked items
		$UncheckedItems = $checkedlistboxGroups.Items | Where-Object { $checkedlistboxGroups.CheckedItems -notcontains $_ }
		
		#Compare unchecked items to the list, if an unchecked item is present on the list we need to uncheck the item in the listbox
		Compare-Object -ReferenceObject $CachedCheckedGroups -DifferenceObject $UncheckedItems -IncludeEqual | ForEach-Object {
			# == means that the obj is unchecked but present on the file, we need to remove from file
			If ($_.SideIndicator -eq "==")
			{
				#Remove the item that is present on the list but unchecked from the file
				$Info = $CachedCheckedGroups | select-string -pattern $_.InputObject -notmatch
				$InfoMessage = $Info
				$Info | Out-File $CacheGroups -Force -ErrorAction SilentlyContinue
			}
		}
	}
	
	
	$Items = @()
	$Items += $checkedlistboxGroups.CheckedItems
	$Items += "Domain Users"
	Update-ComboBox -ComboBox $comboboxPrimaryGroup -Items $Items
	
	
}





$optionsToolStripMenuItem_Click = {
	Show-OptionsMenu_psf
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	If ($DarkMode -eq 1)
	{
		Set-DarkMode
		
	}
	Else
	{
		Set-LightMode
		
	}
}

$textboxDescription_FocusChanged = {
	$ADDescription = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADDescription -ErrorAction SilentlyContinue).ADDescription
	If ($ADDescription -eq 1)
	{
		$words = $textboxDescription.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxDescription.Text = $TextInfo.ToTitleCase($words)
	}
	
}

$textboxoffice_FocusChanged = {
	$ADOffice = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADOffice -ErrorAction SilentlyContinue).ADOffice
	If ($ADOffice -eq 1)
	{
		$words = $textboxoffice.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxoffice.Text = $TextInfo.ToTitleCase($words)
	}
	
}

$textboxSamAccount_FocusChanged = {
	$ADSamAccountName = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADSamAccountName -ErrorAction SilentlyContinue).ADSamAccountName
	If ($ADSamAccountName -eq 1)
	{
		$words = $textboxSamAccount.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxSamAccount.Text = $TextInfo.ToTitleCase($words)
	}
	
}



$textboxStreet_FocusChanged = {
	$ADStreet = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADStreet -ErrorAction SilentlyContinue).ADStreet
	If ($ADStreet -eq 1)
	{
		$words = $textboxstreet.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxstreet.Text = $TextInfo.ToTitleCase($words)
	}
	
}

$textboxcity_FocusChanged = {
	$ADCity = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADCity -ErrorAction SilentlyContinue).ADCity
	If ($ADCity -eq 1)
	{
		$words = $textboxcity.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxcity.Text = $TextInfo.ToTitleCase($words)
	}
	
}

$textboxstate_FocusChanged = {
	$ADState = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADState -ErrorAction SilentlyContinue).ADState
	If ($ADState -eq 1)
	{
		$words = $textboxstate.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxstate.Text = $TextInfo.ToTitleCase($words)
	}
	
	
}

$textboxjobtitle_FocusChanged = {
	$ADJobTitle = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADJobTitle -ErrorAction SilentlyContinue).ADJobTitle
	If ($ADJobTitle -eq 1)
	{
		$words = $textboxjobtitle.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxjobtitle.Text = $TextInfo.ToTitleCase($words)
	}
	
}

$textboxDepartment_FocusChanged = {
	$ADDepartment = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADDepartment -ErrorAction SilentlyContinue).ADDepartment
	If ($ADDepartment -eq 1)
	{
		$words = $textboxDepartment.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxDepartment.Text = $TextInfo.ToTitleCase($words)
	}
	
}

$textboxCompany_FocusChanged = {
	$ADCompany = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADCompany -ErrorAction SilentlyContinue).ADCompany
	If ($ADCompany -eq 1)
	{
		$words = $textboxCompany.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxCompany.Text = $TextInfo.ToTitleCase($words)
	}
	
}

$textboxSearchGroups_TextChanged = {
	
	$click = 1
	$Filter = $textboxSearchGroups.text
	$Results = $OriginalData | Where-Object { $_ -like "*$filter*" }
	Update-ListBox -ListBox $checkedlistboxGroups -Items $Results
	
	Get-Content $CacheGroups -ErrorAction SilentlyContinue | ForEach-Object {
		If ($checkedlistboxGroups.Items -contains $_)
		{
			$checkedlistboxGroups.SelectedItem = $_
			$index = $checkedlistboxGroups.SelectedIndex
			$checkedlistboxGroups.SetItemCheckState($index, 'Checked')
		}
	}
	
	$click = 0
	
	$textboxSearchGroups.Focus()
	
}


$textboxSearchO365SecurityGroups_TextChanged = {
	$click = 1
	
	
	$Filter = $textboxSearchO365SecurityGroups.text
	$Results = $OriginalDataSecurityGroups | Where-Object { $_ -like "*$filter*" }
	Update-ListBox -ListBox $checkedlistboxO365SecurityGroups -Items $Results
	
	Get-Content $CacheSecurityGroupsFile -ErrorAction SilentlyContinue | ForEach-Object {
		If ($checkedlistboxO365SecurityGroups.Items -contains $_)
		{
			$checkedlistboxO365SecurityGroups.SelectedItem = $_
			$index = $checkedlistboxO365SecurityGroups.SelectedIndex
			$checkedlistboxO365SecurityGroups.SetItemCheckState($index, 'Checked')
		}
	}
	
	$click = 0
	
	$textboxSearchO365SecurityGroups.Focus()
	
}

$textboxO365MailGroups_TextChanged={
	
	$click = 1
	$Filter = $textboxO365MailGroups.text
	$Results = $OriginalDataMailGroups | Where-Object { $_ -like "*$filter*" }
	Update-ListBox -ListBox $checkedlistboxDISTROo365groups -Items $Results
	
	Get-Content $CacheDistroGroupsFile -ErrorAction SilentlyContinue | ForEach-Object {
		If ($checkedlistboxDISTROo365groups.Items -contains $_)
		{
			$checkedlistboxDISTROo365groups.SelectedItem = $_
			$index = $checkedlistboxDISTROo365groups.SelectedIndex
			$checkedlistboxDISTROo365groups.SetItemCheckState($index, 'Checked')
		}
	}
	
	$click = 0
	
	$textboxO365MailGroups.Focus()
	
	
	
	
}

$textboxO365street_FocusChanged={
	$O365Street = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\O365' | Get-ItemProperty -Name O365Street -ErrorAction SilentlyContinue).O365Street
	If ($O365Street -eq 1)
	{
		$words = $textboxO365street.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxO365street.Text = $TextInfo.ToTitleCase($words)
	}
	
}

$textboxo365city_FocusChanged={
	$O365City = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\O365' | Get-ItemProperty -Name O365City -ErrorAction SilentlyContinue).O365City
	If ($O365City -eq 1)
	{
		$words = $textboxo365city.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxo365city.Text = $TextInfo.ToTitleCase($words)
	}
}

$textboxo365state_FocusChanged={
	$O365State = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\O365' | Get-ItemProperty -Name O365State -ErrorAction SilentlyContinue).O365State
	If ($O365State -eq 1)
	{
		$words = $textboxo365state.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxo365state.Text = $TextInfo.ToTitleCase($words)
	}
	
}


$textboxemployeenumber_TextChanged={
	Update-DisplayNameTextbox
	Update-EmailTextbox
	Update-SamAccountNameTextbox
	Update-UserPrincipalNameTextbox
	
}

$textboxEmployeeID_TextChanged={
	Update-DisplayNameTextbox
	Update-EmailTextbox
	Update-SamAccountNameTextbox
	Update-UserPrincipalNameTextbox
}

$textboxEmail_TextChanged={
	
	Update-DisplayNameTextbox
	Update-EmailTextbox
	Update-SamAccountNameTextbox
	Update-UserPrincipalNameTextbox
	
}

$copyActiveDirectoryUserToolStripMenuItem_Click={
	
	#Set value to 1 so we dont have string settings get in the way
	Get-Item 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' -Force | Set-ItemProperty -Name CopyUser -Value 1 -Force | Out-Null
	Show-CopyFromUser_psf
	$CopyUser = $CopyFromUser_comboboxcopyuser
	$Job = $PSJob
	$UserJob = ($Job | Where-Object { $_.Name -like $CopyUser })[0]
	$UserTemplate = Get-ADUser -identity ($UserJob).ObjectGuid -properties *
	Copy-ADUserAttributes
	#Set back to 0
	Get-Item 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' -Force | Set-ItemProperty -Name CopyUser -Value 0 -Force | Out-Null
	Get-Job | Remove-Job
	
}

$textboxSamAccount_TextChanged={
	Update-EmailTextbox
	Update-DisplayNameTextbox
	Update-UserPrincipalNameTextbox
}
$textboxSamAccount_FocusChanged = {
	#Update-EmailTextbox
	Update-DisplayNameTextbox
	#Update-UserPrincipalNameTextbox
}


$clearFormToolStripMenuItem_Click={
	Reset-Form
	
}


$exitToolStripMenuItem1_Click={
	$MainForm.close()
	
}

$copyToolStripMenuItem_Click={
	Show-OptionsMenu_psf
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	If ($DarkMode -eq 1)
	{
		Set-DarkMode
		
	}
	Else
	{
		Set-LightMode
		
	}
	
}

$checkedlistboxDISTROo365groups_SelectedIndexChanged = {
	$CopyO365User = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CopyO365User -ErrorAction SilentlyContinue).CopyO365User
	If ($CopyO365User -ne 1)
	{
		If ($click -ne 1)
		{
			$CachedCheckedDistroGroups = Get-Content $CacheDistroGroupsFile -ErrorAction SilentlyContinue
			
			$checkedlistboxDISTROo365groups.CheckedItems | ForEach-Object{
				#If checked and not in file, add and append
				$CheckItem = Get-Content $CacheDistroGroupsFile | Select-String $_
				If ($null -eq $CheckItem)
				{
					$_ | Out-File $CacheDistroGroupsFile -Force -Append
				}
			}
			
			$CachedCheckedDistroGroups = Get-Content $CacheDistroGroupsFile -ErrorAction SilentlyContinue
			
			
			#Get all unchecked items
			$UncheckedItems = $checkedlistboxDISTROo365groups.Items | Where-Object { $checkedlistboxDISTROo365groups.CheckedItems -notcontains $_ }
			
			#Compare unchecked items to the list, if an unchecked item is present on the list we need to uncheck the item in the listbox
			Compare-Object -ReferenceObject $CachedCheckedDistroGroups -DifferenceObject $UncheckedItems -IncludeEqual | ForEach-Object {
				# == means that the obj is unchecked but present on the file, we need to remove from file
				If ($_.SideIndicator -eq "==")
				{
					#Remove the item that is present on the list but unchecked from the file
					$Info = $CachedCheckedDistroGroups | select-string -pattern $_.InputObject -notmatch
					$InfoMessage = $Info
					$Info | Out-File $CacheDistroGroupsFile -Force -ErrorAction SilentlyContinue
				}
			}
		}
	}
	
}

$checkedlistboxO365SecurityGroups_SelectedIndexChanged = {
	$CopyO365User = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CopyO365User -ErrorAction SilentlyContinue).CopyO365User
	If ($CopyO365User -ne 1)
	{
		If ($click -ne 1)
		{
			$CachedCheckedSecurityGroups = Get-Content $CacheSecurityGroupsFile -ErrorAction SilentlyContinue
			
			$checkedlistboxO365SecurityGroups.CheckedItems | ForEach-Object{
				#If checked and not in file, add and append
				$CheckItem = Get-Content $CacheSecurityGroupsFile | Select-String $_
				If ($null -eq $CheckItem)
				{
					$_ | Out-File $CacheSecurityGroupsFile -Force -Append
				}
			}
			
			$CachedCheckedSecurityGroups = Get-Content $CacheSecurityGroupsFile -ErrorAction SilentlyContinue
			
			
			#Get all unchecked items
			$UncheckedItems = $checkedlistboxO365SecurityGroups.Items | Where-Object { $checkedlistboxO365SecurityGroups.CheckedItems -notcontains $_ }
			
			#Compare unchecked items to the list, if an unchecked item is present on the list we need to uncheck the item in the listbox
			Compare-Object -ReferenceObject $CachedCheckedSecurityGroups -DifferenceObject $UncheckedItems -IncludeEqual | ForEach-Object {
				# == means that the obj is unchecked but present on the file, we need to remove from file
				If ($_.SideIndicator -eq "==")
				{
					#Remove the item that is present on the list but unchecked from the file
					$Info = $CachedCheckedSecurityGroups | select-string -pattern $_.InputObject -notmatch
					$InfoMessage = $Info
					$Info | Out-File $CacheSecurityGroupsFile -Force -ErrorAction SilentlyContinue
				}
			}
		}
	}
	
}

$checkboxUserMustChangePasswo_CheckedChanged={
	If (($checkboxUserCannotChangePass.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
	{
		add-logs -text "WARN: You cannot check both 'User Must Change Password at Next Logon' and 'User Cannot Change Password' for the same user."
		$InfoMessage = "You cannot check both User Must Change Password at Next Logon and User Cannot Change Password for the same user."
		$InfoTitle = "Warning"
		Show-MessageBox_psf
		$checkboxUserCannotChangePass.CheckState = 'Unchecked'
	}
	ElseIf (($checkboxPasswordNeverExpires.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
	{
		add-logs -text "WARN: You have selected 'Password never Expires'. and 'User must change password at next logon'. They will be unable to change their password"
		$InfoMessage = "You have selected 'Password never Expires'. and 'User must change password at next logon'. They will be unable to change their password"
		$InfoTitle = "Warning"
		Show-MessageBox_psf
		$checkboxPasswordNeverExpires.CheckState = 'Unchecked'
	}
	
}

$checkboxUserCannotChangePass_CheckedChanged={
	If (($checkboxUserCannotChangePass.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
	{
		add-logs -text "WARN: You cannot check both 'User Must Change Password at Next Logon' and 'User Cannot Change Password' for the same user."
		$InfoMessage = "You cannot check both 'User Must Change Password at Next Logon' and User 'Cannot Change Password' for the same user."
		$InfoTitle = "Warning"
		Show-MessageBox_psf
		$checkboxUserCannotChangePass.CheckState = 'Unchecked'
		
	}
	
	
}

$checkboxPasswordNeverExpires_CheckedChanged={
	If (($checkboxUserCannotChangePass.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
	{
		add-logs -text "WARN: You cannot check both 'User Must Change Password at Next Logon' and 'User Cannot Change Password' for the same user."
		$InfoMessage = "You cannot check both User Must Change Password at Next Logon and User Cannot Change Password for the same user."
		$InfoTitle = "Warning"
		Show-MessageBox_psf
		$checkboxUserCannotChangePass.CheckState = 'Unchecked'
	}
	ElseIf (($checkboxPasswordNeverExpires.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
	{
		add-logs -text "WARN: You have selected 'Password never Expires'. and 'User must change password at next logon'. They will be unable to change their password"
		$InfoMessage = "You have selected 'Password never Expires'. and 'User must change password at next logon'. They will be unable to change their password"
		$InfoTitle = "Warning"
		Show-MessageBox_psf
		$checkboxPasswordNeverExpires.CheckState = 'Unchecked'
	}
	
}


$copyOffice365UserToolStripMenuItem_Click={
	Get-Item 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' -Force | Set-ItemProperty -Name CopyO365User -Value 1 -Force | Out-Null
	Show-CopyFromO365User_psf
	Copy-O365UserAttributes
	Get-Item 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' -Force | Set-ItemProperty -Name CopyO365User -Value 0 -Force | Out-Null
	
}

$MainForm_Closing=[System.Windows.Forms.FormClosingEventHandler]{
Get-PSSession | Remove-PSSession -ErrorAction SilentlyContinue
	
}



$comboboxO365Domains_SelectedIndexChanged={
	Update-O365EmailTextbox
}


$comboboxDomains_SelectedIndexChanged={
	Update-EmailTextbox
	
}
]]></Code>
  <Mode>0</Mode>
  <Assemblies />
</File>